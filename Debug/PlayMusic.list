
PlayMusic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007404  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800758c  0800758c  0001758c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a0  080076a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080076a0  080076a0  000176a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076a8  080076a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076a8  080076a8  000176a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076ac  080076ac  000176ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080076b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00001064  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001070  20001070  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001312c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bef  00000000  00000000  00033168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001230  00000000  00000000  00035d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010d8  00000000  00000000  00036f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000217a3  00000000  00000000  00038060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015b47  00000000  00000000  00059803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5924  00000000  00000000  0006f34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134c6e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cc4  00000000  00000000  00134cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007574 	.word	0x08007574

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007574 	.word	0x08007574

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <setSampleRate>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void
setSampleRate(uint16_t freq)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
  //uint16_t period = (168000000 / (freq * (99 + 1))) - 1;
	uint16_t period = (168000000 / freq ) - 1;
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <setSampleRate+0x4c>)
 80004da:	fb92 f3f3 	sdiv	r3, r2, r3
 80004de:	b29b      	uxth	r3, r3
 80004e0:	3b01      	subs	r3, #1
 80004e2:	81fb      	strh	r3, [r7, #14]
//  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
//  htim7.Init.Period = period;
//  //htim7.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
//  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
//  HAL_TIM_Base_Init(&htim7);
	htim4.Instance = TIM4;
 80004e4:	4b0d      	ldr	r3, [pc, #52]	; (800051c <setSampleRate+0x50>)
 80004e6:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <setSampleRate+0x54>)
 80004e8:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <setSampleRate+0x50>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f0:	4b0a      	ldr	r3, [pc, #40]	; (800051c <setSampleRate+0x50>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = period;
 80004f6:	89fb      	ldrh	r3, [r7, #14]
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <setSampleRate+0x50>)
 80004fa:	60d3      	str	r3, [r2, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fc:	4b07      	ldr	r3, [pc, #28]	; (800051c <setSampleRate+0x50>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000502:	4b06      	ldr	r3, [pc, #24]	; (800051c <setSampleRate+0x50>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim4);
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <setSampleRate+0x50>)
 800050a:	f003 fadf 	bl	8003acc <HAL_TIM_Base_Init>
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	0a037a00 	.word	0x0a037a00
 800051c:	20000120 	.word	0x20000120
 8000520:	40000800 	.word	0x40000800

08000524 <val2Dac8>:

static inline uint16_t
val2Dac8(int32_t v)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  uint16_t out = v << 3;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	b29b      	uxth	r3, r3
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	81fb      	strh	r3, [r7, #14]
  return out;
 8000534:	89fb      	ldrh	r3, [r7, #14]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <val2Dac16>:

static inline uint16_t
val2Dac16(int32_t v)
{
 8000542:	b480      	push	{r7}
 8000544:	b083      	sub	sp, #12
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  v >>= 4;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	111b      	asrs	r3, r3, #4
 800054e:	607b      	str	r3, [r7, #4]
  v += 2047;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000556:	607b      	str	r3, [r7, #4]
  return v & 0xfff;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	b29b      	uxth	r3, r3
 800055c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000560:	b29b      	uxth	r3, r3
}
 8000562:	4618      	mov	r0, r3
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <prepareDACBuffer_8Bit>:

static void
prepareDACBuffer_8Bit(uint8_t channels, uint16_t numSamples, void *pIn, uint16_t *pOutput)
{
 800056e:	b590      	push	{r4, r7, lr}
 8000570:	b089      	sub	sp, #36	; 0x24
 8000572:	af00      	add	r7, sp, #0
 8000574:	60ba      	str	r2, [r7, #8]
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4603      	mov	r3, r0
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	460b      	mov	r3, r1
 800057e:	81bb      	strh	r3, [r7, #12]
  uint8_t *pInput = (uint8_t *)pIn;
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	61fb      	str	r3, [r7, #28]

  for (int i=0; i<numSamples; i++) {
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
 8000588:	e023      	b.n	80005d2 <prepareDACBuffer_8Bit+0x64>
    int32_t val = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]

    for(int j=0; j<channels; j++) {
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	e00a      	b.n	80005aa <prepareDACBuffer_8Bit+0x3c>
      val += *pInput++;
 8000594:	69fb      	ldr	r3, [r7, #28]
 8000596:	1c5a      	adds	r2, r3, #1
 8000598:	61fa      	str	r2, [r7, #28]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	4413      	add	r3, r2
 80005a2:	617b      	str	r3, [r7, #20]
    for(int j=0; j<channels; j++) {
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	3301      	adds	r3, #1
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	693a      	ldr	r2, [r7, #16]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	dbf0      	blt.n	8000594 <prepareDACBuffer_8Bit+0x26>
    }
    val /= channels;
 80005b2:	7bfb      	ldrb	r3, [r7, #15]
 80005b4:	697a      	ldr	r2, [r7, #20]
 80005b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80005ba:	617b      	str	r3, [r7, #20]
    *pOutput++ = val2Dac8(val);
 80005bc:	687c      	ldr	r4, [r7, #4]
 80005be:	1ca3      	adds	r3, r4, #2
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	6978      	ldr	r0, [r7, #20]
 80005c4:	f7ff ffae 	bl	8000524 <val2Dac8>
 80005c8:	4603      	mov	r3, r0
 80005ca:	8023      	strh	r3, [r4, #0]
  for (int i=0; i<numSamples; i++) {
 80005cc:	69bb      	ldr	r3, [r7, #24]
 80005ce:	3301      	adds	r3, #1
 80005d0:	61bb      	str	r3, [r7, #24]
 80005d2:	89bb      	ldrh	r3, [r7, #12]
 80005d4:	69ba      	ldr	r2, [r7, #24]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	dbd7      	blt.n	800058a <prepareDACBuffer_8Bit+0x1c>
  }
}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3724      	adds	r7, #36	; 0x24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd90      	pop	{r4, r7, pc}

080005e4 <prepareDACBuffer_16Bit>:

static void
prepareDACBuffer_16Bit(uint8_t channels, uint16_t numSamples, void *pIn, uint16_t *pOutput)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b089      	sub	sp, #36	; 0x24
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60ba      	str	r2, [r7, #8]
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	460b      	mov	r3, r1
 80005f4:	81bb      	strh	r3, [r7, #12]
  int16_t *pInput = (int16_t *)pIn;
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	61fb      	str	r3, [r7, #28]

  for (int i=0; i<numSamples; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	61bb      	str	r3, [r7, #24]
 80005fe:	e024      	b.n	800064a <prepareDACBuffer_16Bit+0x66>
    int32_t val = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]

    for(int j=0; j<channels; j++) {
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	e00b      	b.n	8000622 <prepareDACBuffer_16Bit+0x3e>
      val += *pInput++;
 800060a:	69fb      	ldr	r3, [r7, #28]
 800060c:	1c9a      	adds	r2, r3, #2
 800060e:	61fa      	str	r2, [r7, #28]
 8000610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000614:	461a      	mov	r2, r3
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	4413      	add	r3, r2
 800061a:	617b      	str	r3, [r7, #20]
    for(int j=0; j<channels; j++) {
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	3301      	adds	r3, #1
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	693a      	ldr	r2, [r7, #16]
 8000626:	429a      	cmp	r2, r3
 8000628:	dbef      	blt.n	800060a <prepareDACBuffer_16Bit+0x26>
    }
    val /= channels;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000632:	617b      	str	r3, [r7, #20]
    *pOutput++ = val2Dac16(val);
 8000634:	687c      	ldr	r4, [r7, #4]
 8000636:	1ca3      	adds	r3, r4, #2
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	6978      	ldr	r0, [r7, #20]
 800063c:	f7ff ff81 	bl	8000542 <val2Dac16>
 8000640:	4603      	mov	r3, r0
 8000642:	8023      	strh	r3, [r4, #0]
  for (int i=0; i<numSamples; i++) {
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	3301      	adds	r3, #1
 8000648:	61bb      	str	r3, [r7, #24]
 800064a:	89bb      	ldrh	r3, [r7, #12]
 800064c:	69ba      	ldr	r2, [r7, #24]
 800064e:	429a      	cmp	r2, r3
 8000650:	dbd6      	blt.n	8000600 <prepareDACBuffer_16Bit+0x1c>
  }
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3724      	adds	r7, #36	; 0x24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd90      	pop	{r4, r7, pc}

0800065c <outputSamples>:

static void
outputSamples(FIL *fil, struct Wav_Header *header)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b08d      	sub	sp, #52	; 0x34
 8000660:	af02      	add	r7, sp, #8
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
  const uint16_t channels = header->channels; // channel = 1
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	7d9a      	ldrb	r2, [r3, #22]
 800066a:	7ddb      	ldrb	r3, [r3, #23]
 800066c:	021b      	lsls	r3, r3, #8
 800066e:	4313      	orrs	r3, r2
 8000670:	847b      	strh	r3, [r7, #34]	; 0x22
  const uint16_t bytesPerSample = header->bitsPerSample / 8; // = 1
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000676:	b29b      	uxth	r3, r3
 8000678:	08db      	lsrs	r3, r3, #3
 800067a:	843b      	strh	r3, [r7, #32]

  funcP prepareData = (header->bitsPerSample == 8)? prepareDACBuffer_8Bit : prepareDACBuffer_16Bit;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8000680:	b29b      	uxth	r3, r3
 8000682:	2b08      	cmp	r3, #8
 8000684:	d101      	bne.n	800068a <outputSamples+0x2e>
 8000686:	4b3d      	ldr	r3, [pc, #244]	; (800077c <outputSamples+0x120>)
 8000688:	e000      	b.n	800068c <outputSamples+0x30>
 800068a:	4b3d      	ldr	r3, [pc, #244]	; (8000780 <outputSamples+0x124>)
 800068c:	61fb      	str	r3, [r7, #28]

  //flg_dma_done = 1;
  dmaBank = 0;
 800068e:	4b3d      	ldr	r3, [pc, #244]	; (8000784 <outputSamples+0x128>)
 8000690:	2200      	movs	r2, #0
 8000692:	801a      	strh	r2, [r3, #0]

  uint32_t bytes_last = header->dataChunkLength; // BUF_LEN
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  do
  {
	  int blksize = (header->bitsPerSample == 8)? MIN(bytes_last, BUFSIZE / 2) : MIN(bytes_last, BUFSIZE);
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800069e:	b29b      	uxth	r3, r3
 80006a0:	2b08      	cmp	r3, #8
 80006a2:	d106      	bne.n	80006b2 <outputSamples+0x56>
 80006a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006aa:	bf28      	it	cs
 80006ac:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80006b0:	e005      	b.n	80006be <outputSamples+0x62>
 80006b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006b8:	bf28      	it	cs
 80006ba:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80006be:	61bb      	str	r3, [r7, #24]
	    UINT bytes_read;
	    FRESULT res;

	    res = f_read(fil, fileBuffer, blksize, &bytes_read);
 80006c0:	69ba      	ldr	r2, [r7, #24]
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4930      	ldr	r1, [pc, #192]	; (8000788 <outputSamples+0x12c>)
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f006 fbe3 	bl	8006e94 <f_read>
 80006ce:	4603      	mov	r3, r0
 80006d0:	75fb      	strb	r3, [r7, #23]
	    if (res != FR_OK || bytes_read == 0)
 80006d2:	7dfb      	ldrb	r3, [r7, #23]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d141      	bne.n	800075c <outputSamples+0x100>
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d03e      	beq.n	800075c <outputSamples+0x100>
	      break;

	    uint16_t numSamples = bytes_read / bytesPerSample / channels; // 8 bit = 256
 80006de:	68ba      	ldr	r2, [r7, #8]
 80006e0:	8c3b      	ldrh	r3, [r7, #32]
 80006e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80006e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80006e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ec:	82bb      	strh	r3, [r7, #20]
	    int16_t     *pInput = (int16_t *)fileBuffer;
 80006ee:	4b26      	ldr	r3, [pc, #152]	; (8000788 <outputSamples+0x12c>)
 80006f0:	613b      	str	r3, [r7, #16]
	    uint16_t   *pOutput = (uint16_t *)dmaBuffer[dmaBank];
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <outputSamples+0x128>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	029b      	lsls	r3, r3, #10
 80006f8:	4a24      	ldr	r2, [pc, #144]	; (800078c <outputSamples+0x130>)
 80006fa:	4413      	add	r3, r2
 80006fc:	60fb      	str	r3, [r7, #12]

	    prepareData(channels, numSamples, pInput, pOutput);
 80006fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000700:	b2d8      	uxtb	r0, r3
 8000702:	8ab9      	ldrh	r1, [r7, #20]
 8000704:	69fc      	ldr	r4, [r7, #28]
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	693a      	ldr	r2, [r7, #16]
 800070a:	47a0      	blx	r4
	    while(HAL_DAC_GetState(&hdac) != HAL_DAC_STATE_READY);
 800070c:	bf00      	nop
 800070e:	4820      	ldr	r0, [pc, #128]	; (8000790 <outputSamples+0x134>)
 8000710:	f000 ffdd 	bl	80016ce <HAL_DAC_GetState>
 8000714:	4603      	mov	r3, r0
 8000716:	2b01      	cmp	r3, #1
 8000718:	d1f9      	bne.n	800070e <outputSamples+0xb2>
	    HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_2);
 800071a:	2110      	movs	r1, #16
 800071c:	481c      	ldr	r0, [pc, #112]	; (8000790 <outputSamples+0x134>)
 800071e:	f000 ff21 	bl	8001564 <HAL_DAC_Stop_DMA>
	    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, (uint32_t*)dmaBuffer[dmaBank], numSamples, DAC_ALIGN_12B_R);
 8000722:	4b18      	ldr	r3, [pc, #96]	; (8000784 <outputSamples+0x128>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	029b      	lsls	r3, r3, #10
 8000728:	4a18      	ldr	r2, [pc, #96]	; (800078c <outputSamples+0x130>)
 800072a:	441a      	add	r2, r3
 800072c:	8abb      	ldrh	r3, [r7, #20]
 800072e:	2100      	movs	r1, #0
 8000730:	9100      	str	r1, [sp, #0]
 8000732:	2110      	movs	r1, #16
 8000734:	4816      	ldr	r0, [pc, #88]	; (8000790 <outputSamples+0x134>)
 8000736:	f000 fe47 	bl	80013c8 <HAL_DAC_Start_DMA>
	    dmaBank = !dmaBank;
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <outputSamples+0x128>)
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf0c      	ite	eq
 8000742:	2301      	moveq	r3, #1
 8000744:	2300      	movne	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <outputSamples+0x128>)
 800074c:	801a      	strh	r2, [r3, #0]
	    bytes_last -= blksize;
 800074e:	69bb      	ldr	r3, [r7, #24]
 8000750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	627b      	str	r3, [r7, #36]	; 0x24
  }while(0 < bytes_last);
 8000756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000758:	2b00      	cmp	r3, #0
 800075a:	d19e      	bne.n	800069a <outputSamples+0x3e>
  while(HAL_DAC_GetState(&hdac) != HAL_DAC_STATE_READY);
 800075c:	bf00      	nop
 800075e:	480c      	ldr	r0, [pc, #48]	; (8000790 <outputSamples+0x134>)
 8000760:	f000 ffb5 	bl	80016ce <HAL_DAC_GetState>
 8000764:	4603      	mov	r3, r0
 8000766:	2b01      	cmp	r3, #1
 8000768:	d1f9      	bne.n	800075e <outputSamples+0x102>
  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_2);
 800076a:	2110      	movs	r1, #16
 800076c:	4808      	ldr	r0, [pc, #32]	; (8000790 <outputSamples+0x134>)
 800076e:	f000 fef9 	bl	8001564 <HAL_DAC_Stop_DMA>
}
 8000772:	bf00      	nop
 8000774:	372c      	adds	r7, #44	; 0x2c
 8000776:	46bd      	mov	sp, r7
 8000778:	bd90      	pop	{r4, r7, pc}
 800077a:	bf00      	nop
 800077c:	0800056f 	.word	0x0800056f
 8000780:	080005e5 	.word	0x080005e5
 8000784:	2000102c 	.word	0x2000102c
 8000788:	2000042c 	.word	0x2000042c
 800078c:	2000082c 	.word	0x2000082c
 8000790:	20000028 	.word	0x20000028

08000794 <isSupprtedWavFile>:

static uint8_t
isSupprtedWavFile(const struct Wav_Header *header)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if (strncmp(header->riff, "RIFF", 4 ) != 0)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2204      	movs	r2, #4
 80007a0:	4910      	ldr	r1, [pc, #64]	; (80007e4 <isSupprtedWavFile+0x50>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f006 febc 	bl	8007520 <strncmp>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <isSupprtedWavFile+0x1e>
    return 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	e013      	b.n	80007da <isSupprtedWavFile+0x46>

  if (header->vfmt != 1)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	8a9b      	ldrh	r3, [r3, #20]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d001      	beq.n	80007c0 <isSupprtedWavFile+0x2c>
    return 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	e00c      	b.n	80007da <isSupprtedWavFile+0x46>

  if (strncmp(header->dataChunkHeader, "data", 4 ) != 0)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3324      	adds	r3, #36	; 0x24
 80007c4:	2204      	movs	r2, #4
 80007c6:	4908      	ldr	r1, [pc, #32]	; (80007e8 <isSupprtedWavFile+0x54>)
 80007c8:	4618      	mov	r0, r3
 80007ca:	f006 fea9 	bl	8007520 <strncmp>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <isSupprtedWavFile+0x44>
    return 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e000      	b.n	80007da <isSupprtedWavFile+0x46>

  return 1;
 80007d8:	2301      	movs	r3, #1
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	0800758c 	.word	0x0800758c
 80007e8:	08007594 	.word	0x08007594

080007ec <playWavFile>:

static void
playWavFile(char *filename)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80007f8:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 80007fc:	6018      	str	r0, [r3, #0]
  FIL fil;
  FRESULT res;
  UINT count = 0;
 80007fe:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8000802:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]

  struct Wav_Header header;

  res = f_open(&fil, filename, FA_READ);
 800080a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800080e:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8000812:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000816:	2201      	movs	r2, #1
 8000818:	6819      	ldr	r1, [r3, #0]
 800081a:	f006 f97d 	bl	8006b18 <f_open>
 800081e:	4603      	mov	r3, r0
 8000820:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
  if (res != FR_OK)
 8000824:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 8000828:	2b00      	cmp	r3, #0
 800082a:	d138      	bne.n	800089e <playWavFile+0xb2>
    return;

  res = f_read(&fil, &header, sizeof(struct Wav_Header), &count);
 800082c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000830:	f107 010c 	add.w	r1, r7, #12
 8000834:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000838:	222c      	movs	r2, #44	; 0x2c
 800083a:	f006 fb2b 	bl	8006e94 <f_read>
 800083e:	4603      	mov	r3, r0
 8000840:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
  if (res != FR_OK)
 8000844:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 8000848:	2b00      	cmp	r3, #0
 800084a:	d119      	bne.n	8000880 <playWavFile+0x94>
    goto done;

  if (!isSupprtedWavFile(&header))
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff ff9f 	bl	8000794 <isSupprtedWavFile>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d013      	beq.n	8000884 <playWavFile+0x98>
    goto done;

  setSampleRate(header.sampleFreq);
 800085c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8000860:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	b29b      	uxth	r3, r3
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fe2f 	bl	80004cc <setSampleRate>
  outputSamples(&fil, &header);
 800086e:	f107 020c 	add.w	r2, r7, #12
 8000872:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff feef 	bl	800065c <outputSamples>
 800087e:	e002      	b.n	8000886 <playWavFile+0x9a>
    goto done;
 8000880:	bf00      	nop
 8000882:	e000      	b.n	8000886 <playWavFile+0x9a>
    goto done;
 8000884:	bf00      	nop

done :
  res = f_close(&fil);
 8000886:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800088a:	4618      	mov	r0, r3
 800088c:	f006 fcbf 	bl	800720e <f_close>
 8000890:	4603      	mov	r3, r0
 8000892:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
  if (res != FR_OK)
 8000896:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 800089a:	2b00      	cmp	r3, #0
 800089c:	e000      	b.n	80008a0 <playWavFile+0xb4>
    return;
 800089e:	bf00      	nop
    return;
}
 80008a0:	f507 771c 	add.w	r7, r7, #624	; 0x270
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ae:	f000 fbc1 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b2:	f000 f86d 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b6:	f000 f9c3 	bl	8000c40 <MX_GPIO_Init>
  MX_DMA_Init();
 80008ba:	f000 f9a1 	bl	8000c00 <MX_DMA_Init>
  MX_DAC_Init();
 80008be:	f000 f8d1 	bl	8000a64 <MX_DAC_Init>
  MX_TIM7_Init();
 80008c2:	f000 f967 	bl	8000b94 <MX_TIM7_Init>
  MX_SDIO_SD_Init();
 80008c6:	f000 f8f7 	bl	8000ab8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80008ca:	f004 f967 	bl	8004b9c <MX_FATFS_Init>
  MX_TIM4_Init();
 80008ce:	f000 f913 	bl	8000af8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start(&htim7);
  HAL_TIM_Base_Start(&htim4);
 80008d2:	4826      	ldr	r0, [pc, #152]	; (800096c <main+0xc4>)
 80008d4:	f003 f94a 	bl	8003b6c <HAL_TIM_Base_Start>
//	  fresult = f_mount(&fatfs, "",1);
//	  fresult = f_open(&myfile, "Text.txt", FA_READ);
//	  fresult = f_read(&myfile,&receive_arr, f_size(&myfile), (UINT*)&byte_read);
//	  f_close(&myfile);
//  }
  res = f_mount(&FatFs, "", 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	4925      	ldr	r1, [pc, #148]	; (8000970 <main+0xc8>)
 80008dc:	4825      	ldr	r0, [pc, #148]	; (8000974 <main+0xcc>)
 80008de:	f006 f8d5 	bl	8006a8c <f_mount>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b24      	ldr	r3, [pc, #144]	; (8000978 <main+0xd0>)
 80008e8:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK)
 80008ea:	4b23      	ldr	r3, [pc, #140]	; (8000978 <main+0xd0>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <main+0x4e>
    return EXIT_FAILURE;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e036      	b.n	8000964 <main+0xbc>
  res = f_opendir(&dir, "/emb");
 80008f6:	4921      	ldr	r1, [pc, #132]	; (800097c <main+0xd4>)
 80008f8:	4821      	ldr	r0, [pc, #132]	; (8000980 <main+0xd8>)
 80008fa:	f006 fcb2 	bl	8007262 <f_opendir>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <main+0xd0>)
 8000904:	701a      	strb	r2, [r3, #0]
  if (res != FR_OK)
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <main+0xd0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <main+0x6a>
    return EXIT_FAILURE;
 800090e:	2301      	movs	r3, #1
 8000910:	e028      	b.n	8000964 <main+0xbc>
  while(1) {
    res = f_readdir(&dir, &fno);
 8000912:	491c      	ldr	r1, [pc, #112]	; (8000984 <main+0xdc>)
 8000914:	481a      	ldr	r0, [pc, #104]	; (8000980 <main+0xd8>)
 8000916:	f006 fd3d 	bl	8007394 <f_readdir>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <main+0xd0>)
 8000920:	701a      	strb	r2, [r3, #0]
    if (res != FR_OK || fno.fname[0] == 0)
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <main+0xd0>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d114      	bne.n	8000954 <main+0xac>
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <main+0xdc>)
 800092c:	7a5b      	ldrb	r3, [r3, #9]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d010      	beq.n	8000954 <main+0xac>
      break;

    char *filename = fno.fname;
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <main+0xe0>)
 8000934:	607b      	str	r3, [r7, #4]

    if (strstr(filename, ".WAV") != 0) {
 8000936:	4915      	ldr	r1, [pc, #84]	; (800098c <main+0xe4>)
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f006 fe05 	bl	8007548 <strstr>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <main+0xa2>
      playWavFile(filename);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f7ff ff51 	bl	80007ec <playWavFile>
    }

    HAL_Delay(1000);
 800094a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800094e:	f000 fbe3 	bl	8001118 <HAL_Delay>
  while(1) {
 8000952:	e7de      	b.n	8000912 <main+0x6a>
  }

  res = f_closedir(&dir);
 8000954:	480a      	ldr	r0, [pc, #40]	; (8000980 <main+0xd8>)
 8000956:	f006 fcf7 	bl	8007348 <f_closedir>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <main+0xd0>)
 8000960:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000962:	e7fe      	b.n	8000962 <main+0xba>

    /* USER CODE BEGIN 3 */
  }
  //  playAudio("test.wav");
  /* USER CODE END 3 */
}
 8000964:	4618      	mov	r0, r3
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000120 	.word	0x20000120
 8000970:	0800759c 	.word	0x0800759c
 8000974:	200001b0 	.word	0x200001b0
 8000978:	200003e0 	.word	0x200003e0
 800097c:	080075a0 	.word	0x080075a0
 8000980:	200003e4 	.word	0x200003e4
 8000984:	20000414 	.word	0x20000414
 8000988:	2000041d 	.word	0x2000041d
 800098c:	080075a8 	.word	0x080075a8

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b094      	sub	sp, #80	; 0x50
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	2230      	movs	r2, #48	; 0x30
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f006 fdb6 	bl	8007510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <SystemClock_Config+0xcc>)
 80009ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009bc:	4a27      	ldr	r2, [pc, #156]	; (8000a5c <SystemClock_Config+0xcc>)
 80009be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c2:	6413      	str	r3, [r2, #64]	; 0x40
 80009c4:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <SystemClock_Config+0xcc>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <SystemClock_Config+0xd0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <SystemClock_Config+0xd0>)
 80009da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <SystemClock_Config+0xd0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f0:	2301      	movs	r3, #1
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009f4:	2310      	movs	r3, #16
 80009f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f8:	2302      	movs	r3, #2
 80009fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009fc:	2300      	movs	r3, #0
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a00:	2308      	movs	r3, #8
 8000a02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a04:	23a8      	movs	r3, #168	; 0xa8
 8000a06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a10:	f107 0320 	add.w	r3, r7, #32
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 fc6d 	bl	80022f4 <HAL_RCC_OscConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a20:	f000 f952 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a24:	230f      	movs	r3, #15
 8000a26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2105      	movs	r1, #5
 8000a42:	4618      	mov	r0, r3
 8000a44:	f001 fece 	bl	80027e4 <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a4e:	f000 f93b 	bl	8000cc8 <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3750      	adds	r7, #80	; 0x50
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40007000 	.word	0x40007000

08000a64 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_DAC_Init+0x4c>)
 8000a74:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <MX_DAC_Init+0x50>)
 8000a76:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <MX_DAC_Init+0x4c>)
 8000a7a:	f000 fc82 	bl	8001382 <HAL_DAC_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000a84:	f000 f920 	bl	8000cc8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000a88:	232c      	movs	r3, #44	; 0x2c
 8000a8a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a90:	463b      	mov	r3, r7
 8000a92:	2210      	movs	r2, #16
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <MX_DAC_Init+0x4c>)
 8000a98:	f000 fdca 	bl	8001630 <HAL_DAC_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000aa2:	f000 f911 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000028 	.word	0x20000028
 8000ab4:	40007400 	.word	0x40007400

08000ab8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_SDIO_SD_Init+0x38>)
 8000abe:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <MX_SDIO_SD_Init+0x3c>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_SDIO_SD_Init+0x38>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_SDIO_SD_Init+0x38>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_SDIO_SD_Init+0x38>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_SDIO_SD_Init+0x38>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <MX_SDIO_SD_Init+0x38>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <MX_SDIO_SD_Init+0x38>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	2000009c 	.word	0x2000009c
 8000af4:	40012c00 	.word	0x40012c00

08000af8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <MX_TIM4_Init+0x94>)
 8000b16:	4a1e      	ldr	r2, [pc, #120]	; (8000b90 <MX_TIM4_Init+0x98>)
 8000b18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_TIM4_Init+0x94>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b20:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_TIM4_Init+0x94>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_TIM4_Init+0x94>)
 8000b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_TIM4_Init+0x94>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_TIM4_Init+0x94>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b3a:	4814      	ldr	r0, [pc, #80]	; (8000b8c <MX_TIM4_Init+0x94>)
 8000b3c:	f002 ffc6 	bl	8003acc <HAL_TIM_Base_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000b46:	f000 f8bf 	bl	8000cc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	4619      	mov	r1, r3
 8000b56:	480d      	ldr	r0, [pc, #52]	; (8000b8c <MX_TIM4_Init+0x94>)
 8000b58:	f003 f870 	bl	8003c3c <HAL_TIM_ConfigClockSource>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000b62:	f000 f8b1 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b66:	2320      	movs	r3, #32
 8000b68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4619      	mov	r1, r3
 8000b72:	4806      	ldr	r0, [pc, #24]	; (8000b8c <MX_TIM4_Init+0x94>)
 8000b74:	f003 fa64 	bl	8004040 <HAL_TIMEx_MasterConfigSynchronization>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000b7e:	f000 f8a3 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000120 	.word	0x20000120
 8000b90:	40000800 	.word	0x40000800

08000b94 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_TIM7_Init+0x64>)
 8000ba4:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <MX_TIM7_Init+0x68>)
 8000ba6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_TIM7_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_TIM7_Init+0x64>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_TIM7_Init+0x64>)
 8000bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bba:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_TIM7_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_TIM7_Init+0x64>)
 8000bc4:	f002 ff82 	bl	8003acc <HAL_TIM_Base_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000bce:	f000 f87b 	bl	8000cc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bd2:	2320      	movs	r3, #32
 8000bd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4806      	ldr	r0, [pc, #24]	; (8000bf8 <MX_TIM7_Init+0x64>)
 8000be0:	f003 fa2e 	bl	8004040 <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000bea:	f000 f86d 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000168 	.word	0x20000168
 8000bfc:	40001400 	.word	0x40001400

08000c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_DMA_Init+0x3c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <MX_DMA_Init+0x3c>)
 8000c10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_DMA_Init+0x3c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2100      	movs	r1, #0
 8000c26:	2011      	movs	r0, #17
 8000c28:	f000 fb75 	bl	8001316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c2c:	2011      	movs	r0, #17
 8000c2e:	f000 fb8e 	bl	800134e <HAL_NVIC_EnableIRQ>

}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_GPIO_Init+0x84>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <MX_GPIO_Init+0x84>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_GPIO_Init+0x84>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_GPIO_Init+0x84>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <MX_GPIO_Init+0x84>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_GPIO_Init+0x84>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_GPIO_Init+0x84>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <MX_GPIO_Init+0x84>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <MX_GPIO_Init+0x84>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_GPIO_Init+0x84>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <MX_GPIO_Init+0x84>)
 8000ca4:	f043 0308 	orr.w	r3, r3, #8
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_GPIO_Init+0x84>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <Error_Handler+0x8>
	...

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <HAL_MspInit+0x4c>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <HAL_MspInit+0x4c>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <HAL_MspInit+0x4c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	603b      	str	r3, [r7, #0]
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_MspInit+0x4c>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_MspInit+0x4c>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_MspInit+0x4c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800

08000d24 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <HAL_DAC_MspInit+0xdc>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d158      	bne.n	8000df8 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b2e      	ldr	r3, [pc, #184]	; (8000e04 <HAL_DAC_MspInit+0xe0>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a2d      	ldr	r2, [pc, #180]	; (8000e04 <HAL_DAC_MspInit+0xe0>)
 8000d50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b2b      	ldr	r3, [pc, #172]	; (8000e04 <HAL_DAC_MspInit+0xe0>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <HAL_DAC_MspInit+0xe0>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a26      	ldr	r2, [pc, #152]	; (8000e04 <HAL_DAC_MspInit+0xe0>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <HAL_DAC_MspInit+0xe0>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d82:	2303      	movs	r3, #3
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481d      	ldr	r0, [pc, #116]	; (8000e08 <HAL_DAC_MspInit+0xe4>)
 8000d92:	f001 f913 	bl	8001fbc <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8000d96:	4b1d      	ldr	r3, [pc, #116]	; (8000e0c <HAL_DAC_MspInit+0xe8>)
 8000d98:	4a1d      	ldr	r2, [pc, #116]	; (8000e10 <HAL_DAC_MspInit+0xec>)
 8000d9a:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <HAL_DAC_MspInit+0xe8>)
 8000d9e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000da2:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da4:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_DAC_MspInit+0xe8>)
 8000da6:	2240      	movs	r2, #64	; 0x40
 8000da8:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000daa:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_DAC_MspInit+0xe8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_DAC_MspInit+0xe8>)
 8000db2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db6:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <HAL_DAC_MspInit+0xe8>)
 8000dba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dbe:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_DAC_MspInit+0xe8>)
 8000dc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc6:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_NORMAL;
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_DAC_MspInit+0xe8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_DAC_MspInit+0xe8>)
 8000dd0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000dd4:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd6:	4b0d      	ldr	r3, [pc, #52]	; (8000e0c <HAL_DAC_MspInit+0xe8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <HAL_DAC_MspInit+0xe8>)
 8000dde:	f000 fd0d 	bl	80017fc <HAL_DMA_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8000de8:	f7ff ff6e 	bl	8000cc8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <HAL_DAC_MspInit+0xe8>)
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_DAC_MspInit+0xe8>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	; 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40007400 	.word	0x40007400
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	2000003c 	.word	0x2000003c
 8000e10:	400260a0 	.word	0x400260a0

08000e14 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	; 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a28      	ldr	r2, [pc, #160]	; (8000ed4 <HAL_SD_MspInit+0xc0>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d14a      	bne.n	8000ecc <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <HAL_SD_MspInit+0xc4>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a26      	ldr	r2, [pc, #152]	; (8000ed8 <HAL_SD_MspInit+0xc4>)
 8000e40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <HAL_SD_MspInit+0xc4>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <HAL_SD_MspInit+0xc4>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a1f      	ldr	r2, [pc, #124]	; (8000ed8 <HAL_SD_MspInit+0xc4>)
 8000e5c:	f043 0304 	orr.w	r3, r3, #4
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <HAL_SD_MspInit+0xc4>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_SD_MspInit+0xc4>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <HAL_SD_MspInit+0xc4>)
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_SD_MspInit+0xc4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000e8a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <HAL_SD_MspInit+0xc8>)
 8000ea8:	f001 f888 	bl	8001fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eac:	2304      	movs	r3, #4
 8000eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <HAL_SD_MspInit+0xcc>)
 8000ec8:	f001 f878 	bl	8001fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40012c00 	.word	0x40012c00
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	40020c00 	.word	0x40020c00

08000ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <HAL_TIM_Base_MspInit+0x64>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d10e      	bne.n	8000f14 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <HAL_TIM_Base_MspInit+0x68>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a13      	ldr	r2, [pc, #76]	; (8000f4c <HAL_TIM_Base_MspInit+0x68>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_TIM_Base_MspInit+0x68>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000f12:	e012      	b.n	8000f3a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0d      	ldr	r2, [pc, #52]	; (8000f50 <HAL_TIM_Base_MspInit+0x6c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d10d      	bne.n	8000f3a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_TIM_Base_MspInit+0x68>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <HAL_TIM_Base_MspInit+0x68>)
 8000f28:	f043 0320 	orr.w	r3, r3, #32
 8000f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <HAL_TIM_Base_MspInit+0x68>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	f003 0320 	and.w	r3, r3, #32
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40000800 	.word	0x40000800
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40001400 	.word	0x40001400

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <NMI_Handler+0x4>

08000f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <MemManage_Handler+0x4>

08000f66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <BusFault_Handler+0x4>

08000f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <UsageFault_Handler+0x4>

08000f72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa0:	f000 f89a 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <DMA1_Stream6_IRQHandler+0x10>)
 8000fae:	f000 fd9b 	bl	8001ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	2000003c 	.word	0x2000003c

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001018 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fe6:	490e      	ldr	r1, [pc, #56]	; (8001020 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ffc:	4c0b      	ldr	r4, [pc, #44]	; (800102c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800100a:	f7ff ffd7 	bl	8000fbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800100e:	f006 fa5b 	bl	80074c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fc49 	bl	80008a8 <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001018:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001024:	080076b0 	.word	0x080076b0
  ldr r2, =_sbss
 8001028:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800102c:	20001070 	.word	0x20001070

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>
	...

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0d      	ldr	r2, [pc, #52]	; (8001074 <HAL_Init+0x40>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <HAL_Init+0x40>)
 800104a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800104e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	; (8001074 <HAL_Init+0x40>)
 8001056:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f94f 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	200f      	movs	r0, #15
 8001064:	f000 f808 	bl	8001078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fe34 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x54>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x58>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f967 	bl	800136a <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f000 f92f 	bl	8001316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_InitTick+0x5c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000004 	.word	0x20000004

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20001030 	.word	0x20001030

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20001030 	.word	0x20001030

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffde 	bl	8001100 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	; (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4907      	ldr	r1, [pc, #28]	; (80011fc <__NVIC_EnableIRQ+0x38>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff29 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff3e 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff8e 	bl	8001254 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff31 	bl	80011c4 <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa2 	bl	80012bc <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e014      	b.n	80013be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	791b      	ldrb	r3, [r3, #4]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	d105      	bne.n	80013aa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff fcbd 	bl	8000d24 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2202      	movs	r2, #2
 80013ae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	795b      	ldrb	r3, [r3, #5]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_DAC_Start_DMA+0x22>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e0ab      	b.n	8001542 <HAL_DAC_Start_DMA+0x17a>
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2201      	movs	r2, #1
 80013ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2202      	movs	r2, #2
 80013f4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d12f      	bne.n	800145c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a52      	ldr	r2, [pc, #328]	; (800154c <HAL_DAC_Start_DMA+0x184>)
 8001402:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	4a51      	ldr	r2, [pc, #324]	; (8001550 <HAL_DAC_Start_DMA+0x188>)
 800140a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4a50      	ldr	r2, [pc, #320]	; (8001554 <HAL_DAC_Start_DMA+0x18c>)
 8001412:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001422:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	2b08      	cmp	r3, #8
 8001428:	d013      	beq.n	8001452 <HAL_DAC_Start_DMA+0x8a>
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	2b08      	cmp	r3, #8
 800142e:	d845      	bhi.n	80014bc <HAL_DAC_Start_DMA+0xf4>
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_DAC_Start_DMA+0x76>
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d005      	beq.n	8001448 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800143c:	e03e      	b.n	80014bc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	3308      	adds	r3, #8
 8001444:	613b      	str	r3, [r7, #16]
        break;
 8001446:	e03c      	b.n	80014c2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	330c      	adds	r3, #12
 800144e:	613b      	str	r3, [r7, #16]
        break;
 8001450:	e037      	b.n	80014c2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3310      	adds	r3, #16
 8001458:	613b      	str	r3, [r7, #16]
        break;
 800145a:	e032      	b.n	80014c2 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	4a3d      	ldr	r2, [pc, #244]	; (8001558 <HAL_DAC_Start_DMA+0x190>)
 8001462:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	4a3c      	ldr	r2, [pc, #240]	; (800155c <HAL_DAC_Start_DMA+0x194>)
 800146a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	4a3b      	ldr	r2, [pc, #236]	; (8001560 <HAL_DAC_Start_DMA+0x198>)
 8001472:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001482:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	2b08      	cmp	r3, #8
 8001488:	d013      	beq.n	80014b2 <HAL_DAC_Start_DMA+0xea>
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	2b08      	cmp	r3, #8
 800148e:	d817      	bhi.n	80014c0 <HAL_DAC_Start_DMA+0xf8>
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_DAC_Start_DMA+0xd6>
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	2b04      	cmp	r3, #4
 800149a:	d005      	beq.n	80014a8 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800149c:	e010      	b.n	80014c0 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3314      	adds	r3, #20
 80014a4:	613b      	str	r3, [r7, #16]
        break;
 80014a6:	e00c      	b.n	80014c2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	3318      	adds	r3, #24
 80014ae:	613b      	str	r3, [r7, #16]
        break;
 80014b0:	e007      	b.n	80014c2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	331c      	adds	r3, #28
 80014b8:	613b      	str	r3, [r7, #16]
        break;
 80014ba:	e002      	b.n	80014c2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80014bc:	bf00      	nop
 80014be:	e000      	b.n	80014c2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80014c0:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d111      	bne.n	80014ec <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014d6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6898      	ldr	r0, [r3, #8]
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	f000 fa39 	bl	8001958 <HAL_DMA_Start_IT>
 80014e6:	4603      	mov	r3, r0
 80014e8:	75fb      	strb	r3, [r7, #23]
 80014ea:	e010      	b.n	800150e <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80014fa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	68d8      	ldr	r0, [r3, #12]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	f000 fa27 	bl	8001958 <HAL_DMA_Start_IT>
 800150a:	4603      	mov	r3, r0
 800150c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10c      	bne.n	8001534 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6819      	ldr	r1, [r3, #0]
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f003 0310 	and.w	r3, r3, #16
 8001526:	2201      	movs	r2, #1
 8001528:	409a      	lsls	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e005      	b.n	8001540 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f043 0204 	orr.w	r2, r3, #4
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001540:	7dfb      	ldrb	r3, [r7, #23]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	080016e9 	.word	0x080016e9
 8001550:	0800170b 	.word	0x0800170b
 8001554:	08001727 	.word	0x08001727
 8001558:	08001791 	.word	0x08001791
 800155c:	080017b3 	.word	0x080017b3
 8001560:	080017cf 	.word	0x080017cf

08001564 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6819      	ldr	r1, [r3, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f003 0310 	and.w	r3, r3, #16
 800157a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	43da      	mvns	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	400a      	ands	r2, r1
 800158a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6819      	ldr	r1, [r3, #0]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	f003 0310 	and.w	r3, r3, #16
 8001598:	2201      	movs	r2, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43da      	mvns	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	400a      	ands	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10d      	bne.n	80015ca <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 fa28 	bl	8001a08 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	e00c      	b.n	80015e4 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 fa1a 	bl	8001a08 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80015e2:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2201      	movs	r2, #1
 80015e8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	795b      	ldrb	r3, [r3, #5]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d101      	bne.n	8001648 <HAL_DAC_ConfigChannel+0x18>
 8001644:	2302      	movs	r3, #2
 8001646:	e03c      	b.n	80016c2 <HAL_DAC_ConfigChannel+0x92>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2201      	movs	r2, #1
 800164c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2202      	movs	r2, #2
 8001652:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	4013      	ands	r3, r2
 8001670:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f003 0310 	and.w	r3, r3, #16
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	4313      	orrs	r3, r2
 800168e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6819      	ldr	r1, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	22c0      	movs	r2, #192	; 0xc0
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	400a      	ands	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2201      	movs	r2, #1
 80016b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2200      	movs	r2, #0
 80016be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	791b      	ldrb	r3, [r3, #4]
 80016da:	b2db      	uxtb	r3, r3
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7ff ff7c 	bl	80015f4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2201      	movs	r2, #1
 8001700:	711a      	strb	r2, [r3, #4]
}
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001716:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f7ff ff75 	bl	8001608 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001732:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	f043 0204 	orr.w	r2, r3, #4
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001740:	68f8      	ldr	r0, [r7, #12]
 8001742:	f7ff ff6b 	bl	800161c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	2201      	movs	r2, #1
 800174a:	711a      	strb	r2, [r3, #4]
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800179e:	68f8      	ldr	r0, [r7, #12]
 80017a0:	f7ff ffd8 	bl	8001754 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	711a      	strb	r2, [r3, #4]
}
 80017aa:	bf00      	nop
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b084      	sub	sp, #16
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017be:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff ffd1 	bl	8001768 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017da:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	f043 0204 	orr.w	r2, r3, #4
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f7ff ffc7 	bl	800177c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2201      	movs	r2, #1
 80017f2:	711a      	strb	r2, [r3, #4]
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001808:	f7ff fc7a 	bl	8001100 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e099      	b.n	800194c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001838:	e00f      	b.n	800185a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800183a:	f7ff fc61 	bl	8001100 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b05      	cmp	r3, #5
 8001846:	d908      	bls.n	800185a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2220      	movs	r2, #32
 800184c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2203      	movs	r2, #3
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e078      	b.n	800194c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1e8      	bne.n	800183a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	4b38      	ldr	r3, [pc, #224]	; (8001954 <HAL_DMA_Init+0x158>)
 8001874:	4013      	ands	r3, r2
 8001876:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001886:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800189e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	d107      	bne.n	80018c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	4313      	orrs	r3, r2
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f023 0307 	bic.w	r3, r3, #7
 80018da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d117      	bne.n	800191e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00e      	beq.n	800191e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fadf 	bl	8001ec4 <DMA_CheckFifoParam>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2240      	movs	r2, #64	; 0x40
 8001910:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800191a:	2301      	movs	r3, #1
 800191c:	e016      	b.n	800194c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 fa96 	bl	8001e58 <DMA_CalcBaseAndBitshift>
 800192c:	4603      	mov	r3, r0
 800192e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001934:	223f      	movs	r2, #63	; 0x3f
 8001936:	409a      	lsls	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	f010803f 	.word	0xf010803f

08001958 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
 8001964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_DMA_Start_IT+0x26>
 800197a:	2302      	movs	r3, #2
 800197c:	e040      	b.n	8001a00 <HAL_DMA_Start_IT+0xa8>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2b01      	cmp	r3, #1
 8001990:	d12f      	bne.n	80019f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2202      	movs	r2, #2
 8001996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2200      	movs	r2, #0
 800199e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 fa28 	bl	8001dfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b0:	223f      	movs	r2, #63	; 0x3f
 80019b2:	409a      	lsls	r2, r3
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0216 	orr.w	r2, r2, #22
 80019c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d007      	beq.n	80019e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f042 0208 	orr.w	r2, r2, #8
 80019de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0201 	orr.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	e005      	b.n	80019fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019fa:	2302      	movs	r3, #2
 80019fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a16:	f7ff fb73 	bl	8001100 <HAL_GetTick>
 8001a1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d008      	beq.n	8001a3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e052      	b.n	8001ae0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f022 0216 	bic.w	r2, r2, #22
 8001a48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695a      	ldr	r2, [r3, #20]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d103      	bne.n	8001a6a <HAL_DMA_Abort+0x62>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 0208 	bic.w	r2, r2, #8
 8001a78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0201 	bic.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a8a:	e013      	b.n	8001ab4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a8c:	f7ff fb38 	bl	8001100 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b05      	cmp	r3, #5
 8001a98:	d90c      	bls.n	8001ab4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2220      	movs	r2, #32
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e015      	b.n	8001ae0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1e4      	bne.n	8001a8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac6:	223f      	movs	r2, #63	; 0x3f
 8001ac8:	409a      	lsls	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001af4:	4b8e      	ldr	r3, [pc, #568]	; (8001d30 <HAL_DMA_IRQHandler+0x248>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a8e      	ldr	r2, [pc, #568]	; (8001d34 <HAL_DMA_IRQHandler+0x24c>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	0a9b      	lsrs	r3, r3, #10
 8001b00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	2208      	movs	r2, #8
 8001b14:	409a      	lsls	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01a      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0204 	bic.w	r2, r2, #4
 8001b3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b40:	2208      	movs	r2, #8
 8001b42:	409a      	lsls	r2, r3
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4c:	f043 0201 	orr.w	r2, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b58:	2201      	movs	r2, #1
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d012      	beq.n	8001b8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00b      	beq.n	8001b8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b76:	2201      	movs	r2, #1
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	f043 0202 	orr.w	r2, r3, #2
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8e:	2204      	movs	r2, #4
 8001b90:	409a      	lsls	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d012      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00b      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	2204      	movs	r2, #4
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	f043 0204 	orr.w	r2, r3, #4
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d043      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d03c      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be2:	2210      	movs	r2, #16
 8001be4:	409a      	lsls	r2, r3
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d018      	beq.n	8001c2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d108      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d024      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
 8001c16:	e01f      	b.n	8001c58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01b      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
 8001c28:	e016      	b.n	8001c58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d107      	bne.n	8001c48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0208 	bic.w	r2, r2, #8
 8001c46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4013      	ands	r3, r2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 808f 	beq.w	8001d88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 8087 	beq.w	8001d88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7e:	2220      	movs	r2, #32
 8001c80:	409a      	lsls	r2, r3
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b05      	cmp	r3, #5
 8001c90:	d136      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0216 	bic.w	r2, r2, #22
 8001ca0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d103      	bne.n	8001cc2 <HAL_DMA_IRQHandler+0x1da>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0208 	bic.w	r2, r2, #8
 8001cd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd6:	223f      	movs	r2, #63	; 0x3f
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d07e      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	4798      	blx	r3
        }
        return;
 8001cfe:	e079      	b.n	8001df4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d01d      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10d      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d031      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
 8001d2c:	e02c      	b.n	8001d88 <HAL_DMA_IRQHandler+0x2a0>
 8001d2e:	bf00      	nop
 8001d30:	20000000 	.word	0x20000000
 8001d34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d023      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
 8001d48:	e01e      	b.n	8001d88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10f      	bne.n	8001d78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0210 	bic.w	r2, r2, #16
 8001d66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d032      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d022      	beq.n	8001de2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2205      	movs	r2, #5
 8001da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0201 	bic.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	3301      	adds	r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d307      	bcc.n	8001dd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f2      	bne.n	8001db4 <HAL_DMA_IRQHandler+0x2cc>
 8001dce:	e000      	b.n	8001dd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001dd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4798      	blx	r3
 8001df2:	e000      	b.n	8001df6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001df4:	bf00      	nop
    }
  }
}
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2b40      	cmp	r3, #64	; 0x40
 8001e28:	d108      	bne.n	8001e3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e3a:	e007      	b.n	8001e4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	60da      	str	r2, [r3, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3b10      	subs	r3, #16
 8001e68:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <DMA_CalcBaseAndBitshift+0x64>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e72:	4a13      	ldr	r2, [pc, #76]	; (8001ec0 <DMA_CalcBaseAndBitshift+0x68>)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d909      	bls.n	8001e9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e8e:	f023 0303 	bic.w	r3, r3, #3
 8001e92:	1d1a      	adds	r2, r3, #4
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	659a      	str	r2, [r3, #88]	; 0x58
 8001e98:	e007      	b.n	8001eaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ea2:	f023 0303 	bic.w	r3, r3, #3
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	aaaaaaab 	.word	0xaaaaaaab
 8001ec0:	08007604 	.word	0x08007604

08001ec4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d11f      	bne.n	8001f1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d856      	bhi.n	8001f92 <DMA_CheckFifoParam+0xce>
 8001ee4:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <DMA_CheckFifoParam+0x28>)
 8001ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eea:	bf00      	nop
 8001eec:	08001efd 	.word	0x08001efd
 8001ef0:	08001f0f 	.word	0x08001f0f
 8001ef4:	08001efd 	.word	0x08001efd
 8001ef8:	08001f93 	.word	0x08001f93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d046      	beq.n	8001f96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f0c:	e043      	b.n	8001f96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f16:	d140      	bne.n	8001f9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f1c:	e03d      	b.n	8001f9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f26:	d121      	bne.n	8001f6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d837      	bhi.n	8001f9e <DMA_CheckFifoParam+0xda>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <DMA_CheckFifoParam+0x70>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001f45 	.word	0x08001f45
 8001f38:	08001f4b 	.word	0x08001f4b
 8001f3c:	08001f45 	.word	0x08001f45
 8001f40:	08001f5d 	.word	0x08001f5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
      break;
 8001f48:	e030      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d025      	beq.n	8001fa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f5a:	e022      	b.n	8001fa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f64:	d11f      	bne.n	8001fa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f6a:	e01c      	b.n	8001fa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d903      	bls.n	8001f7a <DMA_CheckFifoParam+0xb6>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d003      	beq.n	8001f80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f78:	e018      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f7e:	e015      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00e      	beq.n	8001faa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f90:	e00b      	b.n	8001faa <DMA_CheckFifoParam+0xe6>
      break;
 8001f92:	bf00      	nop
 8001f94:	e00a      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      break;
 8001f96:	bf00      	nop
 8001f98:	e008      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      break;
 8001f9a:	bf00      	nop
 8001f9c:	e006      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      break;
 8001f9e:	bf00      	nop
 8001fa0:	e004      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      break;
 8001fa2:	bf00      	nop
 8001fa4:	e002      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      break;   
 8001fa6:	bf00      	nop
 8001fa8:	e000      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      break;
 8001faa:	bf00      	nop
    }
  } 
  
  return status; 
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	e16b      	b.n	80022b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fd8:	2201      	movs	r2, #1
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	f040 815a 	bne.w	80022aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d005      	beq.n	800200e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800200a:	2b02      	cmp	r3, #2
 800200c:	d130      	bne.n	8002070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2203      	movs	r2, #3
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002044:	2201      	movs	r2, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 0201 	and.w	r2, r3, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b03      	cmp	r3, #3
 800207a:	d017      	beq.n	80020ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2203      	movs	r2, #3
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d123      	bne.n	8002100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	08da      	lsrs	r2, r3, #3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3208      	adds	r2, #8
 80020c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	220f      	movs	r2, #15
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	691a      	ldr	r2, [r3, #16]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	08da      	lsrs	r2, r3, #3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3208      	adds	r2, #8
 80020fa:	69b9      	ldr	r1, [r7, #24]
 80020fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 0203 	and.w	r2, r3, #3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80b4 	beq.w	80022aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
 8002146:	4b60      	ldr	r3, [pc, #384]	; (80022c8 <HAL_GPIO_Init+0x30c>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	4a5f      	ldr	r2, [pc, #380]	; (80022c8 <HAL_GPIO_Init+0x30c>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002150:	6453      	str	r3, [r2, #68]	; 0x44
 8002152:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <HAL_GPIO_Init+0x30c>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800215e:	4a5b      	ldr	r2, [pc, #364]	; (80022cc <HAL_GPIO_Init+0x310>)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a52      	ldr	r2, [pc, #328]	; (80022d0 <HAL_GPIO_Init+0x314>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d02b      	beq.n	80021e2 <HAL_GPIO_Init+0x226>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a51      	ldr	r2, [pc, #324]	; (80022d4 <HAL_GPIO_Init+0x318>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d025      	beq.n	80021de <HAL_GPIO_Init+0x222>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a50      	ldr	r2, [pc, #320]	; (80022d8 <HAL_GPIO_Init+0x31c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01f      	beq.n	80021da <HAL_GPIO_Init+0x21e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4f      	ldr	r2, [pc, #316]	; (80022dc <HAL_GPIO_Init+0x320>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d019      	beq.n	80021d6 <HAL_GPIO_Init+0x21a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4e      	ldr	r2, [pc, #312]	; (80022e0 <HAL_GPIO_Init+0x324>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_GPIO_Init+0x216>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4d      	ldr	r2, [pc, #308]	; (80022e4 <HAL_GPIO_Init+0x328>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00d      	beq.n	80021ce <HAL_GPIO_Init+0x212>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4c      	ldr	r2, [pc, #304]	; (80022e8 <HAL_GPIO_Init+0x32c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d007      	beq.n	80021ca <HAL_GPIO_Init+0x20e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4b      	ldr	r2, [pc, #300]	; (80022ec <HAL_GPIO_Init+0x330>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_GPIO_Init+0x20a>
 80021c2:	2307      	movs	r3, #7
 80021c4:	e00e      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021c6:	2308      	movs	r3, #8
 80021c8:	e00c      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021ca:	2306      	movs	r3, #6
 80021cc:	e00a      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021ce:	2305      	movs	r3, #5
 80021d0:	e008      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021d2:	2304      	movs	r3, #4
 80021d4:	e006      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021d6:	2303      	movs	r3, #3
 80021d8:	e004      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021da:	2302      	movs	r3, #2
 80021dc:	e002      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021e2:	2300      	movs	r3, #0
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	f002 0203 	and.w	r2, r2, #3
 80021ea:	0092      	lsls	r2, r2, #2
 80021ec:	4093      	lsls	r3, r2
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f4:	4935      	ldr	r1, [pc, #212]	; (80022cc <HAL_GPIO_Init+0x310>)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	3302      	adds	r3, #2
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002226:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800222c:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_GPIO_Init+0x334>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002250:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002256:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800227a:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <HAL_GPIO_Init+0x334>)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a4:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <HAL_GPIO_Init+0x334>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3301      	adds	r3, #1
 80022ae:	61fb      	str	r3, [r7, #28]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b0f      	cmp	r3, #15
 80022b4:	f67f ae90 	bls.w	8001fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40013800 	.word	0x40013800
 80022d0:	40020000 	.word	0x40020000
 80022d4:	40020400 	.word	0x40020400
 80022d8:	40020800 	.word	0x40020800
 80022dc:	40020c00 	.word	0x40020c00
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40021400 	.word	0x40021400
 80022e8:	40021800 	.word	0x40021800
 80022ec:	40021c00 	.word	0x40021c00
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e267      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d075      	beq.n	80023fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002312:	4b88      	ldr	r3, [pc, #544]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b04      	cmp	r3, #4
 800231c:	d00c      	beq.n	8002338 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4b85      	ldr	r3, [pc, #532]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002326:	2b08      	cmp	r3, #8
 8002328:	d112      	bne.n	8002350 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232a:	4b82      	ldr	r3, [pc, #520]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002336:	d10b      	bne.n	8002350 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	4b7e      	ldr	r3, [pc, #504]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d05b      	beq.n	80023fc <HAL_RCC_OscConfig+0x108>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d157      	bne.n	80023fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e242      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0x74>
 800235a:	4b76      	ldr	r3, [pc, #472]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a75      	ldr	r2, [pc, #468]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e01d      	b.n	80023a4 <HAL_RCC_OscConfig+0xb0>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x98>
 8002372:	4b70      	ldr	r3, [pc, #448]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6f      	ldr	r2, [pc, #444]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b6d      	ldr	r3, [pc, #436]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6c      	ldr	r2, [pc, #432]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0xb0>
 800238c:	4b69      	ldr	r3, [pc, #420]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a68      	ldr	r2, [pc, #416]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b66      	ldr	r3, [pc, #408]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a65      	ldr	r2, [pc, #404]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 800239e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7fe fea8 	bl	8001100 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b4:	f7fe fea4 	bl	8001100 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e207      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b5b      	ldr	r3, [pc, #364]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0xc0>
 80023d2:	e014      	b.n	80023fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe fe94 	bl	8001100 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023dc:	f7fe fe90 	bl	8001100 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1f3      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	4b51      	ldr	r3, [pc, #324]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0xe8>
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d063      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240a:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b47      	ldr	r3, [pc, #284]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800241e:	2b08      	cmp	r3, #8
 8002420:	d11c      	bne.n	800245c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002422:	4b44      	ldr	r3, [pc, #272]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d116      	bne.n	800245c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	4b41      	ldr	r3, [pc, #260]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_RCC_OscConfig+0x152>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e1c7      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	4b3b      	ldr	r3, [pc, #236]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4937      	ldr	r1, [pc, #220]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245a:	e03a      	b.n	80024d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002464:	4b34      	ldr	r3, [pc, #208]	; (8002538 <HAL_RCC_OscConfig+0x244>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7fe fe49 	bl	8001100 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002472:	f7fe fe45 	bl	8001100 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e1a8      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	4b2b      	ldr	r3, [pc, #172]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4925      	ldr	r1, [pc, #148]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
 80024a4:	e015      	b.n	80024d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b24      	ldr	r3, [pc, #144]	; (8002538 <HAL_RCC_OscConfig+0x244>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7fe fe28 	bl	8001100 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b4:	f7fe fe24 	bl	8001100 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e187      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d036      	beq.n	800254c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d016      	beq.n	8002514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_RCC_OscConfig+0x248>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7fe fe08 	bl	8001100 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f4:	f7fe fe04 	bl	8001100 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e167      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <HAL_RCC_OscConfig+0x240>)
 8002508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x200>
 8002512:	e01b      	b.n	800254c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_RCC_OscConfig+0x248>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7fe fdf1 	bl	8001100 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	e00e      	b.n	8002540 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002522:	f7fe fded 	bl	8001100 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d907      	bls.n	8002540 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e150      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
 8002534:	40023800 	.word	0x40023800
 8002538:	42470000 	.word	0x42470000
 800253c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002540:	4b88      	ldr	r3, [pc, #544]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ea      	bne.n	8002522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 8097 	beq.w	8002688 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255e:	4b81      	ldr	r3, [pc, #516]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10f      	bne.n	800258a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	4b7d      	ldr	r3, [pc, #500]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a7c      	ldr	r2, [pc, #496]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b7a      	ldr	r3, [pc, #488]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002586:	2301      	movs	r3, #1
 8002588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	4b77      	ldr	r3, [pc, #476]	; (8002768 <HAL_RCC_OscConfig+0x474>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d118      	bne.n	80025c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002596:	4b74      	ldr	r3, [pc, #464]	; (8002768 <HAL_RCC_OscConfig+0x474>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a73      	ldr	r2, [pc, #460]	; (8002768 <HAL_RCC_OscConfig+0x474>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a2:	f7fe fdad 	bl	8001100 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025aa:	f7fe fda9 	bl	8001100 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e10c      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	4b6a      	ldr	r3, [pc, #424]	; (8002768 <HAL_RCC_OscConfig+0x474>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x2ea>
 80025d0:	4b64      	ldr	r3, [pc, #400]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d4:	4a63      	ldr	r2, [pc, #396]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6713      	str	r3, [r2, #112]	; 0x70
 80025dc:	e01c      	b.n	8002618 <HAL_RCC_OscConfig+0x324>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x30c>
 80025e6:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80025e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ea:	4a5e      	ldr	r2, [pc, #376]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	6713      	str	r3, [r2, #112]	; 0x70
 80025f2:	4b5c      	ldr	r3, [pc, #368]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a5b      	ldr	r2, [pc, #364]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0x324>
 8002600:	4b58      	ldr	r3, [pc, #352]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	4a57      	ldr	r2, [pc, #348]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	6713      	str	r3, [r2, #112]	; 0x70
 800260c:	4b55      	ldr	r3, [pc, #340]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4a54      	ldr	r2, [pc, #336]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002612:	f023 0304 	bic.w	r3, r3, #4
 8002616:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d015      	beq.n	800264c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe fd6e 	bl	8001100 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7fe fd6a 	bl	8001100 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0cb      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	4b49      	ldr	r3, [pc, #292]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0ee      	beq.n	8002628 <HAL_RCC_OscConfig+0x334>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264c:	f7fe fd58 	bl	8001100 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002652:	e00a      	b.n	800266a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7fe fd54 	bl	8001100 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0b5      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266a:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1ee      	bne.n	8002654 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002676:	7dfb      	ldrb	r3, [r7, #23]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d105      	bne.n	8002688 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267c:	4b39      	ldr	r3, [pc, #228]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	4a38      	ldr	r2, [pc, #224]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002686:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80a1 	beq.w	80027d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002692:	4b34      	ldr	r3, [pc, #208]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b08      	cmp	r3, #8
 800269c:	d05c      	beq.n	8002758 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d141      	bne.n	800272a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b31      	ldr	r3, [pc, #196]	; (800276c <HAL_RCC_OscConfig+0x478>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe fd28 	bl	8001100 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe fd24 	bl	8001100 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e087      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c6:	4b27      	ldr	r3, [pc, #156]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69da      	ldr	r2, [r3, #28]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	019b      	lsls	r3, r3, #6
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	3b01      	subs	r3, #1
 80026ec:	041b      	lsls	r3, r3, #16
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	491b      	ldr	r1, [pc, #108]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026fc:	4b1b      	ldr	r3, [pc, #108]	; (800276c <HAL_RCC_OscConfig+0x478>)
 80026fe:	2201      	movs	r2, #1
 8002700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002702:	f7fe fcfd 	bl	8001100 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800270a:	f7fe fcf9 	bl	8001100 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e05c      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271c:	4b11      	ldr	r3, [pc, #68]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x416>
 8002728:	e054      	b.n	80027d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_RCC_OscConfig+0x478>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fce6 	bl	8001100 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fce2 	bl	8001100 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e045      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_OscConfig+0x470>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x444>
 8002756:	e03d      	b.n	80027d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d107      	bne.n	8002770 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e038      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
 8002764:	40023800 	.word	0x40023800
 8002768:	40007000 	.word	0x40007000
 800276c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <HAL_RCC_OscConfig+0x4ec>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d028      	beq.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d121      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d11a      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027a0:	4013      	ands	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d111      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	3b01      	subs	r3, #1
 80027ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d107      	bne.n	80027d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800

080027e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0cc      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b68      	ldr	r3, [pc, #416]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d90c      	bls.n	8002820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b63      	ldr	r3, [pc, #396]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0b8      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a58      	ldr	r2, [pc, #352]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002842:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800285a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	494d      	ldr	r1, [pc, #308]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d044      	beq.n	8002904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d119      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e07f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a2:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e06f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b2:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e067      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4934      	ldr	r1, [pc, #208]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7fe fc14 	bl	8001100 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7fe fc10 	bl	8001100 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e04f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b25      	ldr	r3, [pc, #148]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0307 	and.w	r3, r3, #7
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d20c      	bcs.n	800292c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e032      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4916      	ldr	r1, [pc, #88]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	490e      	ldr	r1, [pc, #56]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800296a:	f000 f821 	bl	80029b0 <HAL_RCC_GetSysClockFreq>
 800296e:	4602      	mov	r2, r0
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	490a      	ldr	r1, [pc, #40]	; (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	5ccb      	ldrb	r3, [r1, r3]
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	4a09      	ldr	r2, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fe fb74 	bl	8001078 <HAL_InitTick>

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023c00 	.word	0x40023c00
 80029a0:	40023800 	.word	0x40023800
 80029a4:	080075f4 	.word	0x080075f4
 80029a8:	20000000 	.word	0x20000000
 80029ac:	20000004 	.word	0x20000004

080029b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029b4:	b094      	sub	sp, #80	; 0x50
 80029b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	647b      	str	r3, [r7, #68]	; 0x44
 80029bc:	2300      	movs	r3, #0
 80029be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c0:	2300      	movs	r3, #0
 80029c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c8:	4b79      	ldr	r3, [pc, #484]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 030c 	and.w	r3, r3, #12
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d00d      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x40>
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	f200 80e1 	bhi.w	8002b9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x34>
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d003      	beq.n	80029ea <HAL_RCC_GetSysClockFreq+0x3a>
 80029e2:	e0db      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029e4:	4b73      	ldr	r3, [pc, #460]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029e8:	e0db      	b.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ea:	4b73      	ldr	r3, [pc, #460]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0x208>)
 80029ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029ee:	e0d8      	b.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029f0:	4b6f      	ldr	r3, [pc, #444]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029fa:	4b6d      	ldr	r3, [pc, #436]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d063      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a06:	4b6a      	ldr	r3, [pc, #424]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	099b      	lsrs	r3, r3, #6
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a18:	633b      	str	r3, [r7, #48]	; 0x30
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a22:	4622      	mov	r2, r4
 8002a24:	462b      	mov	r3, r5
 8002a26:	f04f 0000 	mov.w	r0, #0
 8002a2a:	f04f 0100 	mov.w	r1, #0
 8002a2e:	0159      	lsls	r1, r3, #5
 8002a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a34:	0150      	lsls	r0, r2, #5
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	1a51      	subs	r1, r2, r1
 8002a3e:	6139      	str	r1, [r7, #16]
 8002a40:	4629      	mov	r1, r5
 8002a42:	eb63 0301 	sbc.w	r3, r3, r1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a54:	4659      	mov	r1, fp
 8002a56:	018b      	lsls	r3, r1, #6
 8002a58:	4651      	mov	r1, sl
 8002a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a5e:	4651      	mov	r1, sl
 8002a60:	018a      	lsls	r2, r1, #6
 8002a62:	4651      	mov	r1, sl
 8002a64:	ebb2 0801 	subs.w	r8, r2, r1
 8002a68:	4659      	mov	r1, fp
 8002a6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 0300 	mov.w	r3, #0
 8002a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a82:	4690      	mov	r8, r2
 8002a84:	4699      	mov	r9, r3
 8002a86:	4623      	mov	r3, r4
 8002a88:	eb18 0303 	adds.w	r3, r8, r3
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	462b      	mov	r3, r5
 8002a90:	eb49 0303 	adc.w	r3, r9, r3
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	024b      	lsls	r3, r1, #9
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aac:	4621      	mov	r1, r4
 8002aae:	024a      	lsls	r2, r1, #9
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ac0:	f7fd fb82 	bl	80001c8 <__aeabi_uldivmod>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4613      	mov	r3, r2
 8002aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002acc:	e058      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ace:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	099b      	lsrs	r3, r3, #6
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	4611      	mov	r1, r2
 8002ada:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ade:	623b      	str	r3, [r7, #32]
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ae8:	4642      	mov	r2, r8
 8002aea:	464b      	mov	r3, r9
 8002aec:	f04f 0000 	mov.w	r0, #0
 8002af0:	f04f 0100 	mov.w	r1, #0
 8002af4:	0159      	lsls	r1, r3, #5
 8002af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002afa:	0150      	lsls	r0, r2, #5
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4641      	mov	r1, r8
 8002b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b06:	4649      	mov	r1, r9
 8002b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b20:	ebb2 040a 	subs.w	r4, r2, sl
 8002b24:	eb63 050b 	sbc.w	r5, r3, fp
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	00eb      	lsls	r3, r5, #3
 8002b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b36:	00e2      	lsls	r2, r4, #3
 8002b38:	4614      	mov	r4, r2
 8002b3a:	461d      	mov	r5, r3
 8002b3c:	4643      	mov	r3, r8
 8002b3e:	18e3      	adds	r3, r4, r3
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	464b      	mov	r3, r9
 8002b44:	eb45 0303 	adc.w	r3, r5, r3
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b56:	4629      	mov	r1, r5
 8002b58:	028b      	lsls	r3, r1, #10
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b60:	4621      	mov	r1, r4
 8002b62:	028a      	lsls	r2, r1, #10
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
 8002b6e:	61fa      	str	r2, [r7, #28]
 8002b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b74:	f7fd fb28 	bl	80001c8 <__aeabi_uldivmod>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	0c1b      	lsrs	r3, r3, #16
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b9a:	e002      	b.n	8002ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3750      	adds	r7, #80	; 0x50
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	00f42400 	.word	0x00f42400
 8002bb8:	007a1200 	.word	0x007a1200

08002bbc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e022      	b.n	8002c14 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d105      	bne.n	8002be6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fe f917 	bl	8000e14 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2203      	movs	r2, #3
 8002bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f814 	bl	8002c1c <HAL_SD_InitCard>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e00a      	b.n	8002c14 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3708      	adds	r7, #8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c1c:	b5b0      	push	{r4, r5, r7, lr}
 8002c1e:	b08e      	sub	sp, #56	; 0x38
 8002c20:	af04      	add	r7, sp, #16
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002c38:	2376      	movs	r3, #118	; 0x76
 8002c3a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681d      	ldr	r5, [r3, #0]
 8002c40:	466c      	mov	r4, sp
 8002c42:	f107 0314 	add.w	r3, r7, #20
 8002c46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c4e:	f107 0308 	add.w	r3, r7, #8
 8002c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c54:	4628      	mov	r0, r5
 8002c56:	f001 fa6f 	bl	8004138 <SDIO_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e04f      	b.n	8002d0c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002c6c:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <HAL_SD_InitCard+0xf8>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 faa7 	bl	80041ca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002c7c:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <HAL_SD_InitCard+0xf8>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002c82:	2002      	movs	r0, #2
 8002c84:	f7fe fa48 	bl	8001118 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fe69 	bl	8003960 <SD_PowerON>
 8002c8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00b      	beq.n	8002cae <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e02e      	b.n	8002d0c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fd88 	bl	80037c4 <SD_InitCard>
 8002cb4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00b      	beq.n	8002cd4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e01b      	b.n	8002d0c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f001 fb06 	bl	80042ee <SDMMC_CmdBlockLength>
 8002ce2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00f      	beq.n	8002d0a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <HAL_SD_InitCard+0xfc>)
 8002cf0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3728      	adds	r7, #40	; 0x28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bdb0      	pop	{r4, r5, r7, pc}
 8002d14:	422580a0 	.word	0x422580a0
 8002d18:	004005ff 	.word	0x004005ff

08002d1c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b092      	sub	sp, #72	; 0x48
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002d2a:	f7fe f9e9 	bl	8001100 <HAL_GetTick>
 8002d2e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d107      	bne.n	8002d4e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e1bd      	b.n	80030ca <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	f040 81b0 	bne.w	80030bc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002d62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	441a      	add	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d907      	bls.n	8002d80 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e1a4      	b.n	80030ca <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2203      	movs	r2, #3
 8002d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d002      	beq.n	8002d9e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9a:	025b      	lsls	r3, r3, #9
 8002d9c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002da2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	025b      	lsls	r3, r3, #9
 8002da8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002daa:	2390      	movs	r3, #144	; 0x90
 8002dac:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002dae:	2302      	movs	r3, #2
 8002db0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002db6:	2301      	movs	r3, #1
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f107 0214 	add.w	r2, r7, #20
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 fa66 	bl	8004296 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d90a      	bls.n	8002de6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f001 faca 	bl	8004376 <SDMMC_CmdReadMultiBlock>
 8002de2:	6478      	str	r0, [r7, #68]	; 0x44
 8002de4:	e009      	b.n	8002dfa <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 fa9d 	bl	8004332 <SDMMC_CmdReadSingleBlock>
 8002df8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d012      	beq.n	8002e26 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a7a      	ldr	r2, [pc, #488]	; (8002ff0 <HAL_SD_ReadBlocks+0x2d4>)
 8002e06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e151      	b.n	80030ca <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002e2a:	e061      	b.n	8002ef0 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d03c      	beq.n	8002eb4 <HAL_SD_ReadBlocks+0x198>
 8002e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d039      	beq.n	8002eb4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002e40:	2300      	movs	r3, #0
 8002e42:	643b      	str	r3, [r7, #64]	; 0x40
 8002e44:	e033      	b.n	8002eae <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 f99f 	bl	800418e <SDIO_ReadFIFO>
 8002e50:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e58:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e62:	3b01      	subs	r3, #1
 8002e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e68:	0a1b      	lsrs	r3, r3, #8
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e72:	3301      	adds	r3, #1
 8002e74:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	0c1b      	lsrs	r3, r3, #16
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e84:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e88:	3301      	adds	r3, #1
 8002e8a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	0e1b      	lsrs	r3, r3, #24
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eaa:	3301      	adds	r3, #1
 8002eac:	643b      	str	r3, [r7, #64]	; 0x40
 8002eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eb0:	2b07      	cmp	r3, #7
 8002eb2:	d9c8      	bls.n	8002e46 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002eb4:	f7fe f924 	bl	8001100 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d902      	bls.n	8002eca <HAL_SD_ReadBlocks+0x1ae>
 8002ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d112      	bne.n	8002ef0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a48      	ldr	r2, [pc, #288]	; (8002ff0 <HAL_SD_ReadBlocks+0x2d4>)
 8002ed0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e0ec      	b.n	80030ca <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef6:	f240 332a 	movw	r3, #810	; 0x32a
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d095      	beq.n	8002e2c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d022      	beq.n	8002f54 <HAL_SD_ReadBlocks+0x238>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d91f      	bls.n	8002f54 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d01b      	beq.n	8002f54 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 fa8f 	bl	8004444 <SDMMC_CmdStopTransfer>
 8002f26:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d012      	beq.n	8002f54 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2f      	ldr	r2, [pc, #188]	; (8002ff0 <HAL_SD_ReadBlocks+0x2d4>)
 8002f34:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0ba      	b.n	80030ca <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d012      	beq.n	8002f88 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a22      	ldr	r2, [pc, #136]	; (8002ff0 <HAL_SD_ReadBlocks+0x2d4>)
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	f043 0208 	orr.w	r2, r3, #8
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0a0      	b.n	80030ca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d012      	beq.n	8002fbc <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <HAL_SD_ReadBlocks+0x2d4>)
 8002f9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	f043 0202 	orr.w	r2, r3, #2
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e086      	b.n	80030ca <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc2:	f003 0320 	and.w	r3, r3, #32
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d063      	beq.n	8003092 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a08      	ldr	r2, [pc, #32]	; (8002ff0 <HAL_SD_ReadBlocks+0x2d4>)
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	f043 0220 	orr.w	r2, r3, #32
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e06c      	b.n	80030ca <HAL_SD_ReadBlocks+0x3ae>
 8002ff0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f001 f8c8 	bl	800418e <SDIO_ReadFIFO>
 8002ffe:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003002:	b2da      	uxtb	r2, r3
 8003004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003006:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300a:	3301      	adds	r3, #1
 800300c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800300e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003010:	3b01      	subs	r3, #1
 8003012:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	b2da      	uxtb	r2, r3
 800301a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800301c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	3301      	adds	r3, #1
 8003022:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003026:	3b01      	subs	r3, #1
 8003028:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	b2da      	uxtb	r2, r3
 8003030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003032:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003036:	3301      	adds	r3, #1
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800303a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303c:	3b01      	subs	r3, #1
 800303e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	0e1b      	lsrs	r3, r3, #24
 8003044:	b2da      	uxtb	r2, r3
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304c:	3301      	adds	r3, #1
 800304e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003052:	3b01      	subs	r3, #1
 8003054:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003056:	f7fe f853 	bl	8001100 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003062:	429a      	cmp	r2, r3
 8003064:	d902      	bls.n	800306c <HAL_SD_ReadBlocks+0x350>
 8003066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003068:	2b00      	cmp	r3, #0
 800306a:	d112      	bne.n	8003092 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <HAL_SD_ReadBlocks+0x3b8>)
 8003072:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e01b      	b.n	80030ca <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_SD_ReadBlocks+0x38a>
 80030a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1a6      	bne.n	8002ff4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80030ae:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	e006      	b.n	80030ca <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
  }
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3748      	adds	r7, #72	; 0x48
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	004005ff 	.word	0x004005ff

080030d8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b092      	sub	sp, #72	; 0x48
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80030e6:	f7fe f80b 	bl	8001100 <HAL_GetTick>
 80030ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d107      	bne.n	800310a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e166      	b.n	80033d8 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	f040 8159 	bne.w	80033ca <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800311e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	441a      	add	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	429a      	cmp	r2, r3
 800312a:	d907      	bls.n	800313c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e14d      	b.n	80033d8 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2203      	movs	r2, #3
 8003140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2200      	movs	r2, #0
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	2b01      	cmp	r3, #1
 8003152:	d002      	beq.n	800315a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003156:	025b      	lsls	r3, r3, #9
 8003158:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800315a:	f04f 33ff 	mov.w	r3, #4294967295
 800315e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	025b      	lsls	r3, r3, #9
 8003164:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003166:	2390      	movs	r3, #144	; 0x90
 8003168:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800316a:	2300      	movs	r3, #0
 800316c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800316e:	2300      	movs	r3, #0
 8003170:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003172:	2301      	movs	r3, #1
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f107 0218 	add.w	r2, r7, #24
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f001 f888 	bl	8004296 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d90a      	bls.n	80031a2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003198:	4618      	mov	r0, r3
 800319a:	f001 f930 	bl	80043fe <SDMMC_CmdWriteMultiBlock>
 800319e:	6478      	str	r0, [r7, #68]	; 0x44
 80031a0:	e009      	b.n	80031b6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2210      	movs	r2, #16
 80031a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031ae:	4618      	mov	r0, r3
 80031b0:	f001 f903 	bl	80043ba <SDMMC_CmdWriteSingleBlock>
 80031b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80031b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d012      	beq.n	80031e2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a87      	ldr	r2, [pc, #540]	; (80033e0 <HAL_SD_WriteBlocks+0x308>)
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ca:	431a      	orrs	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e0fa      	b.n	80033d8 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80031e6:	e065      	b.n	80032b4 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d040      	beq.n	8003278 <HAL_SD_WriteBlocks+0x1a0>
 80031f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d03d      	beq.n	8003278 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80031fc:	2300      	movs	r3, #0
 80031fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003200:	e037      	b.n	8003272 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320a:	3301      	adds	r3, #1
 800320c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800320e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003210:	3b01      	subs	r3, #1
 8003212:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	021a      	lsls	r2, r3, #8
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003222:	3301      	adds	r3, #1
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003228:	3b01      	subs	r3, #1
 800322a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800322c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	041a      	lsls	r2, r3, #16
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323a:	3301      	adds	r3, #1
 800323c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800323e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003240:	3b01      	subs	r3, #1
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	061a      	lsls	r2, r3, #24
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003252:	3301      	adds	r3, #1
 8003254:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003258:	3b01      	subs	r3, #1
 800325a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f107 0214 	add.w	r2, r7, #20
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f000 ff9e 	bl	80041a8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800326c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800326e:	3301      	adds	r3, #1
 8003270:	643b      	str	r3, [r7, #64]	; 0x40
 8003272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003274:	2b07      	cmp	r3, #7
 8003276:	d9c4      	bls.n	8003202 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003278:	f7fd ff42 	bl	8001100 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003284:	429a      	cmp	r2, r3
 8003286:	d902      	bls.n	800328e <HAL_SD_WriteBlocks+0x1b6>
 8003288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800328a:	2b00      	cmp	r3, #0
 800328c:	d112      	bne.n	80032b4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a53      	ldr	r2, [pc, #332]	; (80033e0 <HAL_SD_WriteBlocks+0x308>)
 8003294:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800329a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800329c:	431a      	orrs	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e091      	b.n	80033d8 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ba:	f240 331a 	movw	r3, #794	; 0x31a
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d091      	beq.n	80031e8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d022      	beq.n	8003318 <HAL_SD_WriteBlocks+0x240>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d91f      	bls.n	8003318 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d01b      	beq.n	8003318 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 f8ad 	bl	8004444 <SDMMC_CmdStopTransfer>
 80032ea:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80032ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d012      	beq.n	8003318 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a3a      	ldr	r2, [pc, #232]	; (80033e0 <HAL_SD_WriteBlocks+0x308>)
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003300:	431a      	orrs	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e05f      	b.n	80033d8 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	2b00      	cmp	r3, #0
 8003324:	d012      	beq.n	800334c <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a2d      	ldr	r2, [pc, #180]	; (80033e0 <HAL_SD_WriteBlocks+0x308>)
 800332c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	f043 0208 	orr.w	r2, r3, #8
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e045      	b.n	80033d8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	2b00      	cmp	r3, #0
 8003358:	d012      	beq.n	8003380 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a20      	ldr	r2, [pc, #128]	; (80033e0 <HAL_SD_WriteBlocks+0x308>)
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	f043 0202 	orr.w	r2, r3, #2
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e02b      	b.n	80033d8 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	d012      	beq.n	80033b4 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <HAL_SD_WriteBlocks+0x308>)
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339a:	f043 0210 	orr.w	r2, r3, #16
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e011      	b.n	80033d8 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80033bc:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e006      	b.n	80033d8 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
  }
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3748      	adds	r7, #72	; 0x48
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	004005ff 	.word	0x004005ff

080033e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f2:	0f9b      	lsrs	r3, r3, #30
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033fe:	0e9b      	lsrs	r3, r3, #26
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	b2da      	uxtb	r2, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003410:	0e1b      	lsrs	r3, r3, #24
 8003412:	b2db      	uxtb	r3, r3
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	b2da      	uxtb	r2, r3
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003422:	0c1b      	lsrs	r3, r3, #16
 8003424:	b2da      	uxtb	r2, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	b2da      	uxtb	r2, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800343a:	b2da      	uxtb	r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003444:	0d1b      	lsrs	r3, r3, #20
 8003446:	b29a      	uxth	r2, r3
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	b2da      	uxtb	r2, r3
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003462:	0bdb      	lsrs	r3, r3, #15
 8003464:	b2db      	uxtb	r3, r3
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	b2da      	uxtb	r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003474:	0b9b      	lsrs	r3, r3, #14
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	b2da      	uxtb	r2, r3
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003486:	0b5b      	lsrs	r3, r3, #13
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	b2da      	uxtb	r2, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003498:	0b1b      	lsrs	r3, r3, #12
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2200      	movs	r2, #0
 80034aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d163      	bne.n	800357c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034b8:	009a      	lsls	r2, r3, #2
 80034ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034be:	4013      	ands	r3, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80034c4:	0f92      	lsrs	r2, r2, #30
 80034c6:	431a      	orrs	r2, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d0:	0edb      	lsrs	r3, r3, #27
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e2:	0e1b      	lsrs	r3, r3, #24
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f4:	0d5b      	lsrs	r3, r3, #21
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003506:	0c9b      	lsrs	r3, r3, #18
 8003508:	b2db      	uxtb	r3, r3
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	b2da      	uxtb	r2, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003518:	0bdb      	lsrs	r3, r3, #15
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	b2da      	uxtb	r2, r3
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	1c5a      	adds	r2, r3, #1
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	7e1b      	ldrb	r3, [r3, #24]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	3302      	adds	r3, #2
 800353c:	2201      	movs	r2, #1
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003546:	fb03 f202 	mul.w	r2, r3, r2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	7a1b      	ldrb	r3, [r3, #8]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	2201      	movs	r2, #1
 800355a:	409a      	lsls	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003568:	0a52      	lsrs	r2, r2, #9
 800356a:	fb03 f202 	mul.w	r2, r3, r2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003578:	661a      	str	r2, [r3, #96]	; 0x60
 800357a:	e031      	b.n	80035e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003580:	2b01      	cmp	r3, #1
 8003582:	d11d      	bne.n	80035c0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003588:	041b      	lsls	r3, r3, #16
 800358a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003592:	0c1b      	lsrs	r3, r3, #16
 8003594:	431a      	orrs	r2, r3
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	3301      	adds	r3, #1
 80035a0:	029a      	lsls	r2, r3, #10
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	661a      	str	r2, [r3, #96]	; 0x60
 80035be:	e00f      	b.n	80035e0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a58      	ldr	r2, [pc, #352]	; (8003728 <HAL_SD_GetCardCSD+0x344>)
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e09d      	b.n	800371c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e4:	0b9b      	lsrs	r3, r3, #14
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f6:	09db      	lsrs	r3, r3, #7
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800360e:	b2da      	uxtb	r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	0fdb      	lsrs	r3, r3, #31
 800361a:	b2da      	uxtb	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	0f5b      	lsrs	r3, r3, #29
 8003626:	b2db      	uxtb	r3, r3
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	b2da      	uxtb	r2, r3
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	0e9b      	lsrs	r3, r3, #26
 8003638:	b2db      	uxtb	r3, r3
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	b2da      	uxtb	r2, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	0d9b      	lsrs	r3, r3, #22
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	b2da      	uxtb	r2, r3
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	0d5b      	lsrs	r3, r3, #21
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	b2da      	uxtb	r2, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	0c1b      	lsrs	r3, r3, #16
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	b2da      	uxtb	r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	0bdb      	lsrs	r3, r3, #15
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	b2da      	uxtb	r2, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	0b9b      	lsrs	r3, r3, #14
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b2:	0b5b      	lsrs	r3, r3, #13
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	0b1b      	lsrs	r3, r3, #12
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036da:	0a9b      	lsrs	r3, r3, #10
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	085b      	lsrs	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800370a:	b2da      	uxtb	r2, r3
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	004005ff 	.word	0x004005ff

0800372c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003790:	f107 030c 	add.w	r3, r7, #12
 8003794:	4619      	mov	r1, r3
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f970 	bl	8003a7c <SD_SendStatus>
 800379c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	0a5b      	lsrs	r3, r3, #9
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80037ba:	693b      	ldr	r3, [r7, #16]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80037c4:	b5b0      	push	{r4, r5, r7, lr}
 80037c6:	b094      	sub	sp, #80	; 0x50
 80037c8:	af04      	add	r7, sp, #16
 80037ca:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80037cc:	2301      	movs	r3, #1
 80037ce:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fd06 	bl	80041e6 <SDIO_GetPowerState>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d102      	bne.n	80037e6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80037e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80037e4:	e0b8      	b.n	8003958 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	d02f      	beq.n	800384e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 feed 	bl	80045d2 <SDMMC_CmdSendCID>
 80037f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80037fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <SD_InitCard+0x40>
    {
      return errorstate;
 8003800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003802:	e0a9      	b.n	8003958 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2100      	movs	r1, #0
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fd30 	bl	8004270 <SDIO_GetResponse>
 8003810:	4602      	mov	r2, r0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2104      	movs	r1, #4
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fd27 	bl	8004270 <SDIO_GetResponse>
 8003822:	4602      	mov	r2, r0
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2108      	movs	r1, #8
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fd1e 	bl	8004270 <SDIO_GetResponse>
 8003834:	4602      	mov	r2, r0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	210c      	movs	r1, #12
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fd15 	bl	8004270 <SDIO_GetResponse>
 8003846:	4602      	mov	r2, r0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	2b03      	cmp	r3, #3
 8003854:	d00d      	beq.n	8003872 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f107 020e 	add.w	r2, r7, #14
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f000 fef3 	bl	800464c <SDMMC_CmdSetRelAdd>
 8003866:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <SD_InitCard+0xae>
    {
      return errorstate;
 800386e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003870:	e072      	b.n	8003958 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	2b03      	cmp	r3, #3
 8003878:	d036      	beq.n	80038e8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800387a:	89fb      	ldrh	r3, [r7, #14]
 800387c:	461a      	mov	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388a:	041b      	lsls	r3, r3, #16
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f000 febd 	bl	800460e <SDMMC_CmdSendCSD>
 8003894:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800389c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389e:	e05b      	b.n	8003958 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 fce2 	bl	8004270 <SDIO_GetResponse>
 80038ac:	4602      	mov	r2, r0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2104      	movs	r1, #4
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 fcd9 	bl	8004270 <SDIO_GetResponse>
 80038be:	4602      	mov	r2, r0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2108      	movs	r1, #8
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fcd0 	bl	8004270 <SDIO_GetResponse>
 80038d0:	4602      	mov	r2, r0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	210c      	movs	r1, #12
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 fcc7 	bl	8004270 <SDIO_GetResponse>
 80038e2:	4602      	mov	r2, r0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2104      	movs	r1, #4
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fcbe 	bl	8004270 <SDIO_GetResponse>
 80038f4:	4603      	mov	r3, r0
 80038f6:	0d1a      	lsrs	r2, r3, #20
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80038fc:	f107 0310 	add.w	r3, r7, #16
 8003900:	4619      	mov	r1, r3
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff fd6e 	bl	80033e4 <HAL_SD_GetCardCSD>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800390e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003912:	e021      	b.n	8003958 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	041b      	lsls	r3, r3, #16
 800391e:	2200      	movs	r2, #0
 8003920:	461c      	mov	r4, r3
 8003922:	4615      	mov	r5, r2
 8003924:	4622      	mov	r2, r4
 8003926:	462b      	mov	r3, r5
 8003928:	4608      	mov	r0, r1
 800392a:	f000 fdad 	bl	8004488 <SDMMC_CmdSelDesel>
 800392e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <SD_InitCard+0x176>
  {
    return errorstate;
 8003936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003938:	e00e      	b.n	8003958 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681d      	ldr	r5, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	466c      	mov	r4, sp
 8003942:	f103 0210 	add.w	r2, r3, #16
 8003946:	ca07      	ldmia	r2, {r0, r1, r2}
 8003948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800394c:	3304      	adds	r3, #4
 800394e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003950:	4628      	mov	r0, r5
 8003952:	f000 fbf1 	bl	8004138 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3740      	adds	r7, #64	; 0x40
 800395c:	46bd      	mov	sp, r7
 800395e:	bdb0      	pop	{r4, r5, r7, pc}

08003960 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003968:	2300      	movs	r3, #0
 800396a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4618      	mov	r0, r3
 800397a:	f000 fda8 	bl	80044ce <SDMMC_CmdGoIdleState>
 800397e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <SD_PowerON+0x2a>
  {
    return errorstate;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	e072      	b.n	8003a70 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 fdbb 	bl	800450a <SDMMC_CmdOperCond>
 8003994:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00d      	beq.n	80039b8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fd91 	bl	80044ce <SDMMC_CmdGoIdleState>
 80039ac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d004      	beq.n	80039be <SD_PowerON+0x5e>
    {
      return errorstate;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	e05b      	b.n	8003a70 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d137      	bne.n	8003a36 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fdbb 	bl	8004548 <SDMMC_CmdAppCommand>
 80039d2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d02d      	beq.n	8003a36 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80039de:	e047      	b.n	8003a70 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2100      	movs	r1, #0
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fdae 	bl	8004548 <SDMMC_CmdAppCommand>
 80039ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <SD_PowerON+0x98>
    {
      return errorstate;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	e03b      	b.n	8003a70 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	491e      	ldr	r1, [pc, #120]	; (8003a78 <SD_PowerON+0x118>)
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fdc4 	bl	800458c <SDMMC_CmdAppOperCommand>
 8003a04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003a10:	e02e      	b.n	8003a70 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2100      	movs	r1, #0
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fc29 	bl	8004270 <SDIO_GetResponse>
 8003a1e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	0fdb      	lsrs	r3, r3, #31
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <SD_PowerON+0xcc>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e000      	b.n	8003a2e <SD_PowerON+0xce>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	613b      	str	r3, [r7, #16]

    count++;
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	3301      	adds	r3, #1
 8003a34:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d802      	bhi.n	8003a46 <SD_PowerON+0xe6>
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0cc      	beq.n	80039e0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d902      	bls.n	8003a56 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a54:	e00c      	b.n	8003a70 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	645a      	str	r2, [r3, #68]	; 0x44
 8003a66:	e002      	b.n	8003a6e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	c1100000 	.word	0xc1100000

08003a7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d102      	bne.n	8003a92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003a8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a90:	e018      	b.n	8003ac4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9a:	041b      	lsls	r3, r3, #16
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4610      	mov	r0, r2
 8003aa0:	f000 fdf5 	bl	800468e <SDMMC_CmdSendStatus>
 8003aa4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d001      	beq.n	8003ab0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	e009      	b.n	8003ac4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fbda 	bl	8004270 <SDIO_GetResponse>
 8003abc:	4602      	mov	r2, r0
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e041      	b.n	8003b62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd f9f6 	bl	8000ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3304      	adds	r3, #4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f000 f95e 	bl	8003dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d001      	beq.n	8003b84 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e046      	b.n	8003c12 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a23      	ldr	r2, [pc, #140]	; (8003c20 <HAL_TIM_Base_Start+0xb4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d022      	beq.n	8003bdc <HAL_TIM_Base_Start+0x70>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b9e:	d01d      	beq.n	8003bdc <HAL_TIM_Base_Start+0x70>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <HAL_TIM_Base_Start+0xb8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d018      	beq.n	8003bdc <HAL_TIM_Base_Start+0x70>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <HAL_TIM_Base_Start+0xbc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d013      	beq.n	8003bdc <HAL_TIM_Base_Start+0x70>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <HAL_TIM_Base_Start+0xc0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00e      	beq.n	8003bdc <HAL_TIM_Base_Start+0x70>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a1b      	ldr	r2, [pc, #108]	; (8003c30 <HAL_TIM_Base_Start+0xc4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d009      	beq.n	8003bdc <HAL_TIM_Base_Start+0x70>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a19      	ldr	r2, [pc, #100]	; (8003c34 <HAL_TIM_Base_Start+0xc8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d004      	beq.n	8003bdc <HAL_TIM_Base_Start+0x70>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a18      	ldr	r2, [pc, #96]	; (8003c38 <HAL_TIM_Base_Start+0xcc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d111      	bne.n	8003c00 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b06      	cmp	r3, #6
 8003bec:	d010      	beq.n	8003c10 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f042 0201 	orr.w	r2, r2, #1
 8003bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfe:	e007      	b.n	8003c10 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	40010000 	.word	0x40010000
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40000800 	.word	0x40000800
 8003c2c:	40000c00 	.word	0x40000c00
 8003c30:	40010400 	.word	0x40010400
 8003c34:	40014000 	.word	0x40014000
 8003c38:	40001800 	.word	0x40001800

08003c3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_TIM_ConfigClockSource+0x1c>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e0b4      	b.n	8003dc2 <HAL_TIM_ConfigClockSource+0x186>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68ba      	ldr	r2, [r7, #8]
 8003c86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c90:	d03e      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0xd4>
 8003c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c96:	f200 8087 	bhi.w	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9e:	f000 8086 	beq.w	8003dae <HAL_TIM_ConfigClockSource+0x172>
 8003ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca6:	d87f      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b70      	cmp	r3, #112	; 0x70
 8003caa:	d01a      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0xa6>
 8003cac:	2b70      	cmp	r3, #112	; 0x70
 8003cae:	d87b      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b60      	cmp	r3, #96	; 0x60
 8003cb2:	d050      	beq.n	8003d56 <HAL_TIM_ConfigClockSource+0x11a>
 8003cb4:	2b60      	cmp	r3, #96	; 0x60
 8003cb6:	d877      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b50      	cmp	r3, #80	; 0x50
 8003cba:	d03c      	beq.n	8003d36 <HAL_TIM_ConfigClockSource+0xfa>
 8003cbc:	2b50      	cmp	r3, #80	; 0x50
 8003cbe:	d873      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b40      	cmp	r3, #64	; 0x40
 8003cc2:	d058      	beq.n	8003d76 <HAL_TIM_ConfigClockSource+0x13a>
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	d86f      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b30      	cmp	r3, #48	; 0x30
 8003cca:	d064      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ccc:	2b30      	cmp	r3, #48	; 0x30
 8003cce:	d86b      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d060      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x15a>
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d867      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d05c      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x15a>
 8003cdc:	2b10      	cmp	r3, #16
 8003cde:	d05a      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ce0:	e062      	b.n	8003da8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6899      	ldr	r1, [r3, #8]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f000 f985 	bl	8004000 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	609a      	str	r2, [r3, #8]
      break;
 8003d0e:	e04f      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6818      	ldr	r0, [r3, #0]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	6899      	ldr	r1, [r3, #8]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f000 f96e 	bl	8004000 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689a      	ldr	r2, [r3, #8]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d32:	609a      	str	r2, [r3, #8]
      break;
 8003d34:	e03c      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	461a      	mov	r2, r3
 8003d44:	f000 f8e2 	bl	8003f0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2150      	movs	r1, #80	; 0x50
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 f93b 	bl	8003fca <TIM_ITRx_SetConfig>
      break;
 8003d54:	e02c      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6859      	ldr	r1, [r3, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	461a      	mov	r2, r3
 8003d64:	f000 f901 	bl	8003f6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2160      	movs	r1, #96	; 0x60
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 f92b 	bl	8003fca <TIM_ITRx_SetConfig>
      break;
 8003d74:	e01c      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6859      	ldr	r1, [r3, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f000 f8c2 	bl	8003f0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2140      	movs	r1, #64	; 0x40
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f91b 	bl	8003fca <TIM_ITRx_SetConfig>
      break;
 8003d94:	e00c      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f000 f912 	bl	8003fca <TIM_ITRx_SetConfig>
      break;
 8003da6:	e003      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	73fb      	strb	r3, [r7, #15]
      break;
 8003dac:	e000      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
	...

08003dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a40      	ldr	r2, [pc, #256]	; (8003ee0 <TIM_Base_SetConfig+0x114>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d013      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d00f      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a3d      	ldr	r2, [pc, #244]	; (8003ee4 <TIM_Base_SetConfig+0x118>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00b      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a3c      	ldr	r2, [pc, #240]	; (8003ee8 <TIM_Base_SetConfig+0x11c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d007      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3b      	ldr	r2, [pc, #236]	; (8003eec <TIM_Base_SetConfig+0x120>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d003      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3a      	ldr	r2, [pc, #232]	; (8003ef0 <TIM_Base_SetConfig+0x124>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d108      	bne.n	8003e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a2f      	ldr	r2, [pc, #188]	; (8003ee0 <TIM_Base_SetConfig+0x114>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02b      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2c:	d027      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a2c      	ldr	r2, [pc, #176]	; (8003ee4 <TIM_Base_SetConfig+0x118>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d023      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a2b      	ldr	r2, [pc, #172]	; (8003ee8 <TIM_Base_SetConfig+0x11c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01f      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <TIM_Base_SetConfig+0x120>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01b      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a29      	ldr	r2, [pc, #164]	; (8003ef0 <TIM_Base_SetConfig+0x124>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d017      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a28      	ldr	r2, [pc, #160]	; (8003ef4 <TIM_Base_SetConfig+0x128>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d013      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a27      	ldr	r2, [pc, #156]	; (8003ef8 <TIM_Base_SetConfig+0x12c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00f      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a26      	ldr	r2, [pc, #152]	; (8003efc <TIM_Base_SetConfig+0x130>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00b      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a25      	ldr	r2, [pc, #148]	; (8003f00 <TIM_Base_SetConfig+0x134>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <TIM_Base_SetConfig+0x138>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a23      	ldr	r2, [pc, #140]	; (8003f08 <TIM_Base_SetConfig+0x13c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d108      	bne.n	8003e90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <TIM_Base_SetConfig+0x114>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_Base_SetConfig+0xf8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a0c      	ldr	r2, [pc, #48]	; (8003ef0 <TIM_Base_SetConfig+0x124>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d103      	bne.n	8003ecc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	615a      	str	r2, [r3, #20]
}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	40000400 	.word	0x40000400
 8003ee8:	40000800 	.word	0x40000800
 8003eec:	40000c00 	.word	0x40000c00
 8003ef0:	40010400 	.word	0x40010400
 8003ef4:	40014000 	.word	0x40014000
 8003ef8:	40014400 	.word	0x40014400
 8003efc:	40014800 	.word	0x40014800
 8003f00:	40001800 	.word	0x40001800
 8003f04:	40001c00 	.word	0x40001c00
 8003f08:	40002000 	.word	0x40002000

08003f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0201 	bic.w	r2, r3, #1
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f023 030a 	bic.w	r3, r3, #10
 8003f48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr

08003f6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b087      	sub	sp, #28
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f023 0210 	bic.w	r2, r3, #16
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	031b      	lsls	r3, r3, #12
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	621a      	str	r2, [r3, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f043 0307 	orr.w	r3, r3, #7
 8003fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	609a      	str	r2, [r3, #8]
}
 8003ff4:	bf00      	nop
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004000:	b480      	push	{r7}
 8004002:	b087      	sub	sp, #28
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800401a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	021a      	lsls	r2, r3, #8
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	431a      	orrs	r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4313      	orrs	r3, r2
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	609a      	str	r2, [r3, #8]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004054:	2302      	movs	r3, #2
 8004056:	e05a      	b.n	800410e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a21      	ldr	r2, [pc, #132]	; (800411c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d022      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a4:	d01d      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1d      	ldr	r2, [pc, #116]	; (8004120 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d018      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a1b      	ldr	r2, [pc, #108]	; (8004124 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1a      	ldr	r2, [pc, #104]	; (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00e      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a18      	ldr	r2, [pc, #96]	; (800412c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d009      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a17      	ldr	r2, [pc, #92]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a15      	ldr	r2, [pc, #84]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d10c      	bne.n	80040fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40010000 	.word	0x40010000
 8004120:	40000400 	.word	0x40000400
 8004124:	40000800 	.word	0x40000800
 8004128:	40000c00 	.word	0x40000c00
 800412c:	40010400 	.word	0x40010400
 8004130:	40014000 	.word	0x40014000
 8004134:	40001800 	.word	0x40001800

08004138 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004138:	b084      	sub	sp, #16
 800413a:	b480      	push	{r7}
 800413c:	b085      	sub	sp, #20
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	f107 001c 	add.w	r0, r7, #28
 8004146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800414e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004150:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004152:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004156:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800415a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800415e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004162:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004172:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	b004      	add	sp, #16
 800418c:	4770      	bx	lr

0800418e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2203      	movs	r2, #3
 80041d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0303 	and.w	r3, r3, #3
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004202:	b480      	push	{r7}
 8004204:	b085      	sub	sp, #20
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004220:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004226:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800422c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800423c:	f023 030f 	bic.w	r3, r3, #15
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	b2db      	uxtb	r3, r3
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	3314      	adds	r3, #20
 800427e:	461a      	mov	r2, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	4413      	add	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
}  
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80042bc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80042c2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80042c8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0

}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b088      	sub	sp, #32
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80042fc:	2310      	movs	r3, #16
 80042fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004300:	2340      	movs	r3, #64	; 0x40
 8004302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800430c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800430e:	f107 0308 	add.w	r3, r7, #8
 8004312:	4619      	mov	r1, r3
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7ff ff74 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	2110      	movs	r1, #16
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f9d7 	bl	80046d4 <SDMMC_GetCmdResp1>
 8004326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004328:	69fb      	ldr	r3, [r7, #28]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3720      	adds	r7, #32
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b088      	sub	sp, #32
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004340:	2311      	movs	r3, #17
 8004342:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004344:	2340      	movs	r3, #64	; 0x40
 8004346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800434c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004350:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004352:	f107 0308 	add.w	r3, r7, #8
 8004356:	4619      	mov	r1, r3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff52 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800435e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004362:	2111      	movs	r1, #17
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f9b5 	bl	80046d4 <SDMMC_GetCmdResp1>
 800436a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800436c:	69fb      	ldr	r3, [r7, #28]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b088      	sub	sp, #32
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004384:	2312      	movs	r3, #18
 8004386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004388:	2340      	movs	r3, #64	; 0x40
 800438a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004394:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004396:	f107 0308 	add.w	r3, r7, #8
 800439a:	4619      	mov	r1, r3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff ff30 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80043a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a6:	2112      	movs	r1, #18
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f993 	bl	80046d4 <SDMMC_GetCmdResp1>
 80043ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043b0:	69fb      	ldr	r3, [r7, #28]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b088      	sub	sp, #32
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80043c8:	2318      	movs	r3, #24
 80043ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80043cc:	2340      	movs	r3, #64	; 0x40
 80043ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80043d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80043da:	f107 0308 	add.w	r3, r7, #8
 80043de:	4619      	mov	r1, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff ff0e 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80043e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ea:	2118      	movs	r1, #24
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f971 	bl	80046d4 <SDMMC_GetCmdResp1>
 80043f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80043f4:	69fb      	ldr	r3, [r7, #28]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b088      	sub	sp, #32
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800440c:	2319      	movs	r3, #25
 800440e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004410:	2340      	movs	r3, #64	; 0x40
 8004412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800441c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800441e:	f107 0308 	add.w	r3, r7, #8
 8004422:	4619      	mov	r1, r3
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f7ff feec 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	2119      	movs	r1, #25
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f94f 	bl	80046d4 <SDMMC_GetCmdResp1>
 8004436:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004438:	69fb      	ldr	r3, [r7, #28]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004450:	230c      	movs	r3, #12
 8004452:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004454:	2340      	movs	r3, #64	; 0x40
 8004456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800445c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004460:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004462:	f107 0308 	add.w	r3, r7, #8
 8004466:	4619      	mov	r1, r3
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff feca 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800446e:	4a05      	ldr	r2, [pc, #20]	; (8004484 <SDMMC_CmdStopTransfer+0x40>)
 8004470:	210c      	movs	r1, #12
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f92e 	bl	80046d4 <SDMMC_GetCmdResp1>
 8004478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800447a:	69fb      	ldr	r3, [r7, #28]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	05f5e100 	.word	0x05f5e100

08004488 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08a      	sub	sp, #40	; 0x28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004498:	2307      	movs	r3, #7
 800449a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800449c:	2340      	movs	r3, #64	; 0x40
 800449e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044aa:	f107 0310 	add.w	r3, r7, #16
 80044ae:	4619      	mov	r1, r3
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f7ff fea6 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80044b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ba:	2107      	movs	r1, #7
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f000 f909 	bl	80046d4 <SDMMC_GetCmdResp1>
 80044c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3728      	adds	r7, #40	; 0x28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b088      	sub	sp, #32
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80044e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80044ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80044ec:	f107 0308 	add.w	r3, r7, #8
 80044f0:	4619      	mov	r1, r3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff fe85 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fb23 	bl	8004b44 <SDMMC_GetCmdError>
 80044fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004500:	69fb      	ldr	r3, [r7, #28]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b088      	sub	sp, #32
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004512:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004516:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004518:	2308      	movs	r3, #8
 800451a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800451c:	2340      	movs	r3, #64	; 0x40
 800451e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004528:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800452a:	f107 0308 	add.w	r3, r7, #8
 800452e:	4619      	mov	r1, r3
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff fe66 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fab6 	bl	8004aa8 <SDMMC_GetCmdResp7>
 800453c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800453e:	69fb      	ldr	r3, [r7, #28]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004556:	2337      	movs	r3, #55	; 0x37
 8004558:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800455a:	2340      	movs	r3, #64	; 0x40
 800455c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004566:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004568:	f107 0308 	add.w	r3, r7, #8
 800456c:	4619      	mov	r1, r3
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff fe47 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	2137      	movs	r1, #55	; 0x37
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f8aa 	bl	80046d4 <SDMMC_GetCmdResp1>
 8004580:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004582:	69fb      	ldr	r3, [r7, #28]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800459c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80045a2:	2329      	movs	r3, #41	; 0x29
 80045a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045a6:	2340      	movs	r3, #64	; 0x40
 80045a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045b4:	f107 0308 	add.w	r3, r7, #8
 80045b8:	4619      	mov	r1, r3
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff fe21 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f9bd 	bl	8004940 <SDMMC_GetCmdResp3>
 80045c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045c8:	69fb      	ldr	r3, [r7, #28]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b088      	sub	sp, #32
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80045de:	2302      	movs	r3, #2
 80045e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80045e2:	23c0      	movs	r3, #192	; 0xc0
 80045e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045f0:	f107 0308 	add.w	r3, r7, #8
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7ff fe03 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f957 	bl	80048b0 <SDMMC_GetCmdResp2>
 8004602:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004604:	69fb      	ldr	r3, [r7, #28]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3720      	adds	r7, #32
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b088      	sub	sp, #32
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800461c:	2309      	movs	r3, #9
 800461e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004620:	23c0      	movs	r3, #192	; 0xc0
 8004622:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004624:	2300      	movs	r3, #0
 8004626:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800462c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800462e:	f107 0308 	add.w	r3, r7, #8
 8004632:	4619      	mov	r1, r3
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff fde4 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f938 	bl	80048b0 <SDMMC_GetCmdResp2>
 8004640:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004642:	69fb      	ldr	r3, [r7, #28]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3720      	adds	r7, #32
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800465a:	2303      	movs	r3, #3
 800465c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800465e:	2340      	movs	r3, #64	; 0x40
 8004660:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800466a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800466c:	f107 0308 	add.w	r3, r7, #8
 8004670:	4619      	mov	r1, r3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff fdc5 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	2103      	movs	r1, #3
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f99d 	bl	80049bc <SDMMC_GetCmdResp6>
 8004682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004684:	69fb      	ldr	r3, [r7, #28]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3720      	adds	r7, #32
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b088      	sub	sp, #32
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800469c:	230d      	movs	r3, #13
 800469e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046a0:	2340      	movs	r3, #64	; 0x40
 80046a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046a4:	2300      	movs	r3, #0
 80046a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046ae:	f107 0308 	add.w	r3, r7, #8
 80046b2:	4619      	mov	r1, r3
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff fda4 	bl	8004202 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80046ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80046be:	210d      	movs	r1, #13
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f807 	bl	80046d4 <SDMMC_GetCmdResp1>
 80046c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046c8:	69fb      	ldr	r3, [r7, #28]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	460b      	mov	r3, r1
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80046e2:	4b70      	ldr	r3, [pc, #448]	; (80048a4 <SDMMC_GetCmdResp1+0x1d0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a70      	ldr	r2, [pc, #448]	; (80048a8 <SDMMC_GetCmdResp1+0x1d4>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	0a5a      	lsrs	r2, r3, #9
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	1e5a      	subs	r2, r3, #1
 80046fa:	61fa      	str	r2, [r7, #28]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004700:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004704:	e0c9      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0ef      	beq.n	80046f6 <SDMMC_GetCmdResp1+0x22>
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ea      	bne.n	80046f6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d004      	beq.n	8004736 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2204      	movs	r2, #4
 8004730:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004732:	2304      	movs	r3, #4
 8004734:	e0b1      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2201      	movs	r2, #1
 8004746:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004748:	2301      	movs	r3, #1
 800474a:	e0a6      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	22c5      	movs	r2, #197	; 0xc5
 8004750:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f7ff fd7f 	bl	8004256 <SDIO_GetCommandResponse>
 8004758:	4603      	mov	r3, r0
 800475a:	461a      	mov	r2, r3
 800475c:	7afb      	ldrb	r3, [r7, #11]
 800475e:	4293      	cmp	r3, r2
 8004760:	d001      	beq.n	8004766 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004762:	2301      	movs	r3, #1
 8004764:	e099      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004766:	2100      	movs	r1, #0
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff fd81 	bl	8004270 <SDIO_GetResponse>
 800476e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4b4e      	ldr	r3, [pc, #312]	; (80048ac <SDMMC_GetCmdResp1+0x1d8>)
 8004774:	4013      	ands	r3, r2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800477a:	2300      	movs	r3, #0
 800477c:	e08d      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	da02      	bge.n	800478a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004784:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004788:	e087      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004794:	2340      	movs	r3, #64	; 0x40
 8004796:	e080      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80047a2:	2380      	movs	r3, #128	; 0x80
 80047a4:	e079      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80047b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047b4:	e071      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80047c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047c4:	e069      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80047d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047d4:	e061      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d002      	beq.n	80047e6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80047e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80047e4:	e059      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80047f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047f4:	e051      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004804:	e049      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d002      	beq.n	8004816 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004810:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004814:	e041      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004824:	e039      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d002      	beq.n	8004836 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004830:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004834:	e031      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004840:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004844:	e029      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004850:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004854:	e021      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004860:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004864:	e019      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004870:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004874:	e011      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004880:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004884:	e009      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004890:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004894:	e001      	b.n	800489a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800489a:	4618      	mov	r0, r3
 800489c:	3720      	adds	r7, #32
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000000 	.word	0x20000000
 80048a8:	10624dd3 	.word	0x10624dd3
 80048ac:	fdffe008 	.word	0xfdffe008

080048b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80048b8:	4b1f      	ldr	r3, [pc, #124]	; (8004938 <SDMMC_GetCmdResp2+0x88>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a1f      	ldr	r2, [pc, #124]	; (800493c <SDMMC_GetCmdResp2+0x8c>)
 80048be:	fba2 2303 	umull	r2, r3, r2, r3
 80048c2:	0a5b      	lsrs	r3, r3, #9
 80048c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c8:	fb02 f303 	mul.w	r3, r2, r3
 80048cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1e5a      	subs	r2, r3, #1
 80048d2:	60fa      	str	r2, [r7, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d102      	bne.n	80048de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80048d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048dc:	e026      	b.n	800492c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0ef      	beq.n	80048ce <SDMMC_GetCmdResp2+0x1e>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1ea      	bne.n	80048ce <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d004      	beq.n	800490e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2204      	movs	r2, #4
 8004908:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800490a:	2304      	movs	r3, #4
 800490c:	e00e      	b.n	800492c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d004      	beq.n	8004924 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004920:	2301      	movs	r3, #1
 8004922:	e003      	b.n	800492c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	22c5      	movs	r2, #197	; 0xc5
 8004928:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	20000000 	.word	0x20000000
 800493c:	10624dd3 	.word	0x10624dd3

08004940 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004948:	4b1a      	ldr	r3, [pc, #104]	; (80049b4 <SDMMC_GetCmdResp3+0x74>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a1a      	ldr	r2, [pc, #104]	; (80049b8 <SDMMC_GetCmdResp3+0x78>)
 800494e:	fba2 2303 	umull	r2, r3, r2, r3
 8004952:	0a5b      	lsrs	r3, r3, #9
 8004954:	f241 3288 	movw	r2, #5000	; 0x1388
 8004958:	fb02 f303 	mul.w	r3, r2, r3
 800495c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1e5a      	subs	r2, r3, #1
 8004962:	60fa      	str	r2, [r7, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004968:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800496c:	e01b      	b.n	80049a6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004972:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0ef      	beq.n	800495e <SDMMC_GetCmdResp3+0x1e>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1ea      	bne.n	800495e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	f003 0304 	and.w	r3, r3, #4
 8004990:	2b00      	cmp	r3, #0
 8004992:	d004      	beq.n	800499e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2204      	movs	r2, #4
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800499a:	2304      	movs	r3, #4
 800499c:	e003      	b.n	80049a6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	22c5      	movs	r2, #197	; 0xc5
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20000000 	.word	0x20000000
 80049b8:	10624dd3 	.word	0x10624dd3

080049bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b088      	sub	sp, #32
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	460b      	mov	r3, r1
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049ca:	4b35      	ldr	r3, [pc, #212]	; (8004aa0 <SDMMC_GetCmdResp6+0xe4>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a35      	ldr	r2, [pc, #212]	; (8004aa4 <SDMMC_GetCmdResp6+0xe8>)
 80049d0:	fba2 2303 	umull	r2, r3, r2, r3
 80049d4:	0a5b      	lsrs	r3, r3, #9
 80049d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049da:	fb02 f303 	mul.w	r3, r2, r3
 80049de:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	1e5a      	subs	r2, r3, #1
 80049e4:	61fa      	str	r2, [r7, #28]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049ee:	e052      	b.n	8004a96 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0ef      	beq.n	80049e0 <SDMMC_GetCmdResp6+0x24>
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1ea      	bne.n	80049e0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0e:	f003 0304 	and.w	r3, r3, #4
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d004      	beq.n	8004a20 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2204      	movs	r2, #4
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a1c:	2304      	movs	r3, #4
 8004a1e:	e03a      	b.n	8004a96 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d004      	beq.n	8004a36 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e02f      	b.n	8004a96 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f7ff fc0d 	bl	8004256 <SDIO_GetCommandResponse>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	461a      	mov	r2, r3
 8004a40:	7afb      	ldrb	r3, [r7, #11]
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d001      	beq.n	8004a4a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e025      	b.n	8004a96 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	22c5      	movs	r2, #197	; 0xc5
 8004a4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004a50:	2100      	movs	r1, #0
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f7ff fc0c 	bl	8004270 <SDIO_GetResponse>
 8004a58:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d106      	bne.n	8004a72 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	0c1b      	lsrs	r3, r3, #16
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e011      	b.n	8004a96 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d002      	beq.n	8004a82 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a80:	e009      	b.n	8004a96 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a90:	e001      	b.n	8004a96 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000000 	.word	0x20000000
 8004aa4:	10624dd3 	.word	0x10624dd3

08004aa8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ab0:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <SDMMC_GetCmdResp7+0x94>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a22      	ldr	r2, [pc, #136]	; (8004b40 <SDMMC_GetCmdResp7+0x98>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	0a5b      	lsrs	r3, r3, #9
 8004abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac0:	fb02 f303 	mul.w	r3, r2, r3
 8004ac4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1e5a      	subs	r2, r3, #1
 8004aca:	60fa      	str	r2, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ad0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ad4:	e02c      	b.n	8004b30 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ada:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0ef      	beq.n	8004ac6 <SDMMC_GetCmdResp7+0x1e>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1ea      	bne.n	8004ac6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d004      	beq.n	8004b06 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2204      	movs	r2, #4
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004b02:	2304      	movs	r3, #4
 8004b04:	e014      	b.n	8004b30 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d004      	beq.n	8004b1c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e009      	b.n	8004b30 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d002      	beq.n	8004b2e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2240      	movs	r2, #64	; 0x40
 8004b2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004b2e:	2300      	movs	r3, #0
  
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	20000000 	.word	0x20000000
 8004b40:	10624dd3 	.word	0x10624dd3

08004b44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004b4c:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <SDMMC_GetCmdError+0x50>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a11      	ldr	r2, [pc, #68]	; (8004b98 <SDMMC_GetCmdError+0x54>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	0a5b      	lsrs	r3, r3, #9
 8004b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5c:	fb02 f303 	mul.w	r3, r2, r3
 8004b60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1e5a      	subs	r2, r3, #1
 8004b66:	60fa      	str	r2, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d102      	bne.n	8004b72 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004b6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b70:	e009      	b.n	8004b86 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f1      	beq.n	8004b62 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	22c5      	movs	r2, #197	; 0xc5
 8004b82:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000000 	.word	0x20000000
 8004b98:	10624dd3 	.word	0x10624dd3

08004b9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004ba0:	4904      	ldr	r1, [pc, #16]	; (8004bb4 <MX_FATFS_Init+0x18>)
 8004ba2:	4805      	ldr	r0, [pc, #20]	; (8004bb8 <MX_FATFS_Init+0x1c>)
 8004ba4:	f002 fc80 	bl	80074a8 <FATFS_LinkDriver>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	461a      	mov	r2, r3
 8004bac:	4b03      	ldr	r3, [pc, #12]	; (8004bbc <MX_FATFS_Init+0x20>)
 8004bae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004bb0:	bf00      	nop
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20001038 	.word	0x20001038
 8004bb8:	0800760c 	.word	0x0800760c
 8004bbc:	20001034 	.word	0x20001034

08004bc0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004bc4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004bda:	f000 f86b 	bl	8004cb4 <BSP_SD_IsDetected>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d001      	beq.n	8004be8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e005      	b.n	8004bf4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004be8:	4804      	ldr	r0, [pc, #16]	; (8004bfc <BSP_SD_Init+0x2c>)
 8004bea:	f7fd ffe7 	bl	8002bbc <HAL_SD_Init>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	2000009c 	.word	0x2000009c

08004c00 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	68f9      	ldr	r1, [r7, #12]
 8004c1c:	4806      	ldr	r0, [pc, #24]	; (8004c38 <BSP_SD_ReadBlocks+0x38>)
 8004c1e:	f7fe f87d 	bl	8002d1c <HAL_SD_ReadBlocks>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	2000009c 	.word	0x2000009c

08004c3c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	68f9      	ldr	r1, [r7, #12]
 8004c58:	4806      	ldr	r0, [pc, #24]	; (8004c74 <BSP_SD_WriteBlocks+0x38>)
 8004c5a:	f7fe fa3d 	bl	80030d8 <HAL_SD_WriteBlocks>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	2000009c 	.word	0x2000009c

08004c78 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004c7c:	4805      	ldr	r0, [pc, #20]	; (8004c94 <BSP_SD_GetCardState+0x1c>)
 8004c7e:	f7fe fd81 	bl	8003784 <HAL_SD_GetCardState>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	bf14      	ite	ne
 8004c88:	2301      	movne	r3, #1
 8004c8a:	2300      	moveq	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	2000009c 	.word	0x2000009c

08004c98 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4803      	ldr	r0, [pc, #12]	; (8004cb0 <BSP_SD_GetCardInfo+0x18>)
 8004ca4:	f7fe fd42 	bl	800372c <HAL_SD_GetCardInfo>
}
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	2000009c 	.word	0x2000009c

08004cb4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004cbe:	79fb      	ldrb	r3, [r7, #7]
 8004cc0:	b2db      	uxtb	r3, r3
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <SD_CheckStatus+0x38>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004ce0:	f7ff ffca 	bl	8004c78 <BSP_SD_GetCardState>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d107      	bne.n	8004cfa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004cea:	4b07      	ldr	r3, [pc, #28]	; (8004d08 <SD_CheckStatus+0x38>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f023 0301 	bic.w	r3, r3, #1
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <SD_CheckStatus+0x38>)
 8004cf8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004cfa:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <SD_CheckStatus+0x38>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	b2db      	uxtb	r3, r3
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20000009 	.word	0x20000009

08004d0c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <SD_initialize+0x38>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8004d1c:	f7ff ff58 	bl	8004bd0 <BSP_SD_Init>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d107      	bne.n	8004d36 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff ffd1 	bl	8004cd0 <SD_CheckStatus>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	461a      	mov	r2, r3
 8004d32:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <SD_initialize+0x38>)
 8004d34:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8004d36:	4b03      	ldr	r3, [pc, #12]	; (8004d44 <SD_initialize+0x38>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	b2db      	uxtb	r3, r3
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20000009 	.word	0x20000009

08004d48 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff ffbb 	bl	8004cd0 <SD_CheckStatus>
 8004d5a:	4603      	mov	r3, r0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	4603      	mov	r3, r0
 8004d72:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8004d78:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	6879      	ldr	r1, [r7, #4]
 8004d80:	68b8      	ldr	r0, [r7, #8]
 8004d82:	f7ff ff3d 	bl	8004c00 <BSP_SD_ReadBlocks>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d107      	bne.n	8004d9c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8004d8c:	bf00      	nop
 8004d8e:	f7ff ff73 	bl	8004c78 <BSP_SD_GetCardState>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1fa      	bne.n	8004d8e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b086      	sub	sp, #24
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	603b      	str	r3, [r7, #0]
 8004db2:	4603      	mov	r3, r0
 8004db4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8004dba:	f04f 33ff 	mov.w	r3, #4294967295
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	68b8      	ldr	r0, [r7, #8]
 8004dc4:	f7ff ff3a 	bl	8004c3c <BSP_SD_WriteBlocks>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d107      	bne.n	8004dde <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8004dce:	bf00      	nop
 8004dd0:	f7ff ff52 	bl	8004c78 <BSP_SD_GetCardState>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1fa      	bne.n	8004dd0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8004dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08c      	sub	sp, #48	; 0x30
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	603a      	str	r2, [r7, #0]
 8004df2:	71fb      	strb	r3, [r7, #7]
 8004df4:	460b      	mov	r3, r1
 8004df6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004dfe:	4b25      	ldr	r3, [pc, #148]	; (8004e94 <SD_ioctl+0xac>)
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <SD_ioctl+0x28>
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e03c      	b.n	8004e8a <SD_ioctl+0xa2>

  switch (cmd)
 8004e10:	79bb      	ldrb	r3, [r7, #6]
 8004e12:	2b03      	cmp	r3, #3
 8004e14:	d834      	bhi.n	8004e80 <SD_ioctl+0x98>
 8004e16:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <SD_ioctl+0x34>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e2d 	.word	0x08004e2d
 8004e20:	08004e35 	.word	0x08004e35
 8004e24:	08004e4d 	.word	0x08004e4d
 8004e28:	08004e67 	.word	0x08004e67
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004e32:	e028      	b.n	8004e86 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8004e34:	f107 030c 	add.w	r3, r7, #12
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff ff2d 	bl	8004c98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8004e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004e4a:	e01c      	b.n	8004e86 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004e4c:	f107 030c 	add.w	r3, r7, #12
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff ff21 	bl	8004c98 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004e64:	e00f      	b.n	8004e86 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8004e66:	f107 030c 	add.w	r3, r7, #12
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff ff14 	bl	8004c98 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8004e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e72:	0a5a      	lsrs	r2, r3, #9
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004e7e:	e002      	b.n	8004e86 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004e80:	2304      	movs	r3, #4
 8004e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004e86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3730      	adds	r7, #48	; 0x30
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	20000009 	.word	0x20000009

08004e98 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	4a08      	ldr	r2, [pc, #32]	; (8004ec8 <disk_status+0x30>)
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	79fa      	ldrb	r2, [r7, #7]
 8004eb0:	4905      	ldr	r1, [pc, #20]	; (8004ec8 <disk_status+0x30>)
 8004eb2:	440a      	add	r2, r1
 8004eb4:	7a12      	ldrb	r2, [r2, #8]
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4798      	blx	r3
 8004eba:	4603      	mov	r3, r0
 8004ebc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20001064 	.word	0x20001064

08004ecc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	4a0d      	ldr	r2, [pc, #52]	; (8004f14 <disk_initialize+0x48>)
 8004ede:	5cd3      	ldrb	r3, [r2, r3]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d111      	bne.n	8004f08 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	4a0b      	ldr	r2, [pc, #44]	; (8004f14 <disk_initialize+0x48>)
 8004ee8:	2101      	movs	r1, #1
 8004eea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	4a09      	ldr	r2, [pc, #36]	; (8004f14 <disk_initialize+0x48>)
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	79fa      	ldrb	r2, [r7, #7]
 8004efa:	4906      	ldr	r1, [pc, #24]	; (8004f14 <disk_initialize+0x48>)
 8004efc:	440a      	add	r2, r1
 8004efe:	7a12      	ldrb	r2, [r2, #8]
 8004f00:	4610      	mov	r0, r2
 8004f02:	4798      	blx	r3
 8004f04:	4603      	mov	r3, r0
 8004f06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	20001064 	.word	0x20001064

08004f18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004f18:	b590      	push	{r4, r7, lr}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
 8004f24:	4603      	mov	r3, r0
 8004f26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	4a0a      	ldr	r2, [pc, #40]	; (8004f54 <disk_read+0x3c>)
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	689c      	ldr	r4, [r3, #8]
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	4a07      	ldr	r2, [pc, #28]	; (8004f54 <disk_read+0x3c>)
 8004f38:	4413      	add	r3, r2
 8004f3a:	7a18      	ldrb	r0, [r3, #8]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	47a0      	blx	r4
 8004f44:	4603      	mov	r3, r0
 8004f46:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd90      	pop	{r4, r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20001064 	.word	0x20001064

08004f58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	603b      	str	r3, [r7, #0]
 8004f64:	4603      	mov	r3, r0
 8004f66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	4a0a      	ldr	r2, [pc, #40]	; (8004f94 <disk_write+0x3c>)
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	68dc      	ldr	r4, [r3, #12]
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	4a07      	ldr	r2, [pc, #28]	; (8004f94 <disk_write+0x3c>)
 8004f78:	4413      	add	r3, r2
 8004f7a:	7a18      	ldrb	r0, [r3, #8]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	68b9      	ldr	r1, [r7, #8]
 8004f82:	47a0      	blx	r4
 8004f84:	4603      	mov	r3, r0
 8004f86:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd90      	pop	{r4, r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20001064 	.word	0x20001064

08004f98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	603a      	str	r2, [r7, #0]
 8004fa2:	71fb      	strb	r3, [r7, #7]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <disk_ioctl+0x38>)
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	79fa      	ldrb	r2, [r7, #7]
 8004fb6:	4906      	ldr	r1, [pc, #24]	; (8004fd0 <disk_ioctl+0x38>)
 8004fb8:	440a      	add	r2, r1
 8004fba:	7a10      	ldrb	r0, [r2, #8]
 8004fbc:	79b9      	ldrb	r1, [r7, #6]
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	4798      	blx	r3
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	73fb      	strb	r3, [r7, #15]
  return res;
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	20001064 	.word	0x20001064

08004fd4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004fe4:	89fb      	ldrh	r3, [r7, #14]
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	b21a      	sxth	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	b21b      	sxth	r3, r3
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	b21b      	sxth	r3, r3
 8004ff4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004ff6:	89fb      	ldrh	r3, [r7, #14]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3303      	adds	r3, #3
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	3202      	adds	r2, #2
 800501c:	7812      	ldrb	r2, [r2, #0]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	3201      	adds	r2, #1
 800502a:	7812      	ldrb	r2, [r2, #0]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	7812      	ldrb	r2, [r2, #0]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]
	return rv;
 800503c:	68fb      	ldr	r3, [r7, #12]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	460b      	mov	r3, r1
 8005054:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	607a      	str	r2, [r7, #4]
 800505c:	887a      	ldrh	r2, [r7, #2]
 800505e:	b2d2      	uxtb	r2, r2
 8005060:	701a      	strb	r2, [r3, #0]
 8005062:	887b      	ldrh	r3, [r7, #2]
 8005064:	0a1b      	lsrs	r3, r3, #8
 8005066:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	887a      	ldrh	r2, [r7, #2]
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	607a      	str	r2, [r7, #4]
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	0a1b      	lsrs	r3, r3, #8
 800509a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	607a      	str	r2, [r7, #4]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	0a1b      	lsrs	r3, r3, #8
 80050ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	607a      	str	r2, [r7, #4]
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	b2d2      	uxtb	r2, r2
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	0a1b      	lsrs	r3, r3, #8
 80050be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	607a      	str	r2, [r7, #4]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	701a      	strb	r2, [r3, #0]
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00d      	beq.n	800510e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	1c53      	adds	r3, r2, #1
 80050f6:	613b      	str	r3, [r7, #16]
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	1c59      	adds	r1, r3, #1
 80050fc:	6179      	str	r1, [r7, #20]
 80050fe:	7812      	ldrb	r2, [r2, #0]
 8005100:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3b01      	subs	r3, #1
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1f1      	bne.n	80050f2 <mem_cpy+0x1a>
	}
}
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800511a:	b480      	push	{r7}
 800511c:	b087      	sub	sp, #28
 800511e:	af00      	add	r7, sp, #0
 8005120:	60f8      	str	r0, [r7, #12]
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	617a      	str	r2, [r7, #20]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3b01      	subs	r3, #1
 800513a:	607b      	str	r3, [r7, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1f3      	bne.n	800512a <mem_set+0x10>
}
 8005142:	bf00      	nop
 8005144:	bf00      	nop
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005150:	b480      	push	{r7}
 8005152:	b089      	sub	sp, #36	; 0x24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005164:	2300      	movs	r3, #0
 8005166:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	61fa      	str	r2, [r7, #28]
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	4619      	mov	r1, r3
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	61ba      	str	r2, [r7, #24]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	1acb      	subs	r3, r1, r3
 800517c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3b01      	subs	r3, #1
 8005182:	607b      	str	r3, [r7, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <mem_cmp+0x40>
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0eb      	beq.n	8005168 <mem_cmp+0x18>

	return r;
 8005190:	697b      	ldr	r3, [r7, #20]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3724      	adds	r7, #36	; 0x24
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80051a8:	e002      	b.n	80051b0 <chk_chr+0x12>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3301      	adds	r3, #1
 80051ae:	607b      	str	r3, [r7, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <chk_chr+0x26>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d1f2      	bne.n	80051aa <chk_chr+0xc>
	return *str;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	781b      	ldrb	r3, [r3, #0]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80051de:	2300      	movs	r3, #0
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	60fb      	str	r3, [r7, #12]
 80051e6:	e029      	b.n	800523c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80051e8:	4a27      	ldr	r2, [pc, #156]	; (8005288 <chk_lock+0xb4>)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	4413      	add	r3, r2
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d01d      	beq.n	8005232 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80051f6:	4a24      	ldr	r2, [pc, #144]	; (8005288 <chk_lock+0xb4>)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	4413      	add	r3, r2
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	429a      	cmp	r2, r3
 8005206:	d116      	bne.n	8005236 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005208:	4a1f      	ldr	r2, [pc, #124]	; (8005288 <chk_lock+0xb4>)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	4413      	add	r3, r2
 8005210:	3304      	adds	r3, #4
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005218:	429a      	cmp	r2, r3
 800521a:	d10c      	bne.n	8005236 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800521c:	4a1a      	ldr	r2, [pc, #104]	; (8005288 <chk_lock+0xb4>)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	4413      	add	r3, r2
 8005224:	3308      	adds	r3, #8
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800522c:	429a      	cmp	r2, r3
 800522e:	d102      	bne.n	8005236 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005230:	e007      	b.n	8005242 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005232:	2301      	movs	r3, #1
 8005234:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3301      	adds	r3, #1
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d9d2      	bls.n	80051e8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d109      	bne.n	800525c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d102      	bne.n	8005254 <chk_lock+0x80>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d101      	bne.n	8005258 <chk_lock+0x84>
 8005254:	2300      	movs	r3, #0
 8005256:	e010      	b.n	800527a <chk_lock+0xa6>
 8005258:	2312      	movs	r3, #18
 800525a:	e00e      	b.n	800527a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d108      	bne.n	8005274 <chk_lock+0xa0>
 8005262:	4a09      	ldr	r2, [pc, #36]	; (8005288 <chk_lock+0xb4>)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	4413      	add	r3, r2
 800526a:	330c      	adds	r3, #12
 800526c:	881b      	ldrh	r3, [r3, #0]
 800526e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005272:	d101      	bne.n	8005278 <chk_lock+0xa4>
 8005274:	2310      	movs	r3, #16
 8005276:	e000      	b.n	800527a <chk_lock+0xa6>
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	20001044 	.word	0x20001044

0800528c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005292:	2300      	movs	r3, #0
 8005294:	607b      	str	r3, [r7, #4]
 8005296:	e002      	b.n	800529e <enq_lock+0x12>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3301      	adds	r3, #1
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d806      	bhi.n	80052b2 <enq_lock+0x26>
 80052a4:	4a09      	ldr	r2, [pc, #36]	; (80052cc <enq_lock+0x40>)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	4413      	add	r3, r2
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f2      	bne.n	8005298 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	bf14      	ite	ne
 80052b8:	2301      	movne	r3, #1
 80052ba:	2300      	moveq	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
}
 80052be:	4618      	mov	r0, r3
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	20001044 	.word	0x20001044

080052d0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
 80052de:	e01f      	b.n	8005320 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80052e0:	4a41      	ldr	r2, [pc, #260]	; (80053e8 <inc_lock+0x118>)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	4413      	add	r3, r2
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d113      	bne.n	800531a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80052f2:	4a3d      	ldr	r2, [pc, #244]	; (80053e8 <inc_lock+0x118>)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	4413      	add	r3, r2
 80052fa:	3304      	adds	r3, #4
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005302:	429a      	cmp	r2, r3
 8005304:	d109      	bne.n	800531a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005306:	4a38      	ldr	r2, [pc, #224]	; (80053e8 <inc_lock+0x118>)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	4413      	add	r3, r2
 800530e:	3308      	adds	r3, #8
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005316:	429a      	cmp	r2, r3
 8005318:	d006      	beq.n	8005328 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3301      	adds	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d9dc      	bls.n	80052e0 <inc_lock+0x10>
 8005326:	e000      	b.n	800532a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005328:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b02      	cmp	r3, #2
 800532e:	d132      	bne.n	8005396 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	e002      	b.n	800533c <inc_lock+0x6c>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3301      	adds	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d806      	bhi.n	8005350 <inc_lock+0x80>
 8005342:	4a29      	ldr	r2, [pc, #164]	; (80053e8 <inc_lock+0x118>)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	4413      	add	r3, r2
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1f2      	bne.n	8005336 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d101      	bne.n	800535a <inc_lock+0x8a>
 8005356:	2300      	movs	r3, #0
 8005358:	e040      	b.n	80053dc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4922      	ldr	r1, [pc, #136]	; (80053e8 <inc_lock+0x118>)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	440b      	add	r3, r1
 8005366:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	491e      	ldr	r1, [pc, #120]	; (80053e8 <inc_lock+0x118>)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	440b      	add	r3, r1
 8005374:	3304      	adds	r3, #4
 8005376:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	491a      	ldr	r1, [pc, #104]	; (80053e8 <inc_lock+0x118>)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	440b      	add	r3, r1
 8005384:	3308      	adds	r3, #8
 8005386:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005388:	4a17      	ldr	r2, [pc, #92]	; (80053e8 <inc_lock+0x118>)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	4413      	add	r3, r2
 8005390:	330c      	adds	r3, #12
 8005392:	2200      	movs	r2, #0
 8005394:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d009      	beq.n	80053b0 <inc_lock+0xe0>
 800539c:	4a12      	ldr	r2, [pc, #72]	; (80053e8 <inc_lock+0x118>)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	4413      	add	r3, r2
 80053a4:	330c      	adds	r3, #12
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <inc_lock+0xe0>
 80053ac:	2300      	movs	r3, #0
 80053ae:	e015      	b.n	80053dc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d108      	bne.n	80053c8 <inc_lock+0xf8>
 80053b6:	4a0c      	ldr	r2, [pc, #48]	; (80053e8 <inc_lock+0x118>)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	011b      	lsls	r3, r3, #4
 80053bc:	4413      	add	r3, r2
 80053be:	330c      	adds	r3, #12
 80053c0:	881b      	ldrh	r3, [r3, #0]
 80053c2:	3301      	adds	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	e001      	b.n	80053cc <inc_lock+0xfc>
 80053c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053cc:	4906      	ldr	r1, [pc, #24]	; (80053e8 <inc_lock+0x118>)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	011b      	lsls	r3, r3, #4
 80053d2:	440b      	add	r3, r1
 80053d4:	330c      	adds	r3, #12
 80053d6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3301      	adds	r3, #1
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	20001044 	.word	0x20001044

080053ec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	607b      	str	r3, [r7, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d825      	bhi.n	800544c <dec_lock+0x60>
		n = Files[i].ctr;
 8005400:	4a17      	ldr	r2, [pc, #92]	; (8005460 <dec_lock+0x74>)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	4413      	add	r3, r2
 8005408:	330c      	adds	r3, #12
 800540a:	881b      	ldrh	r3, [r3, #0]
 800540c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800540e:	89fb      	ldrh	r3, [r7, #14]
 8005410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005414:	d101      	bne.n	800541a <dec_lock+0x2e>
 8005416:	2300      	movs	r3, #0
 8005418:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800541a:	89fb      	ldrh	r3, [r7, #14]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <dec_lock+0x3a>
 8005420:	89fb      	ldrh	r3, [r7, #14]
 8005422:	3b01      	subs	r3, #1
 8005424:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005426:	4a0e      	ldr	r2, [pc, #56]	; (8005460 <dec_lock+0x74>)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	4413      	add	r3, r2
 800542e:	330c      	adds	r3, #12
 8005430:	89fa      	ldrh	r2, [r7, #14]
 8005432:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005434:	89fb      	ldrh	r3, [r7, #14]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d105      	bne.n	8005446 <dec_lock+0x5a>
 800543a:	4a09      	ldr	r2, [pc, #36]	; (8005460 <dec_lock+0x74>)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	4413      	add	r3, r2
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	737b      	strb	r3, [r7, #13]
 800544a:	e001      	b.n	8005450 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800544c:	2302      	movs	r3, #2
 800544e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005450:	7b7b      	ldrb	r3, [r7, #13]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20001044 	.word	0x20001044

08005464 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e010      	b.n	8005494 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005472:	4a0d      	ldr	r2, [pc, #52]	; (80054a8 <clear_lock+0x44>)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	4413      	add	r3, r2
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	429a      	cmp	r2, r3
 8005480:	d105      	bne.n	800548e <clear_lock+0x2a>
 8005482:	4a09      	ldr	r2, [pc, #36]	; (80054a8 <clear_lock+0x44>)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	4413      	add	r3, r2
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3301      	adds	r3, #1
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d9eb      	bls.n	8005472 <clear_lock+0xe>
	}
}
 800549a:	bf00      	nop
 800549c:	bf00      	nop
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	20001044 	.word	0x20001044

080054ac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	78db      	ldrb	r3, [r3, #3]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d034      	beq.n	800552a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054c4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	7858      	ldrb	r0, [r3, #1]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80054d0:	2301      	movs	r3, #1
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	f7ff fd40 	bl	8004f58 <disk_write>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80054de:	2301      	movs	r3, #1
 80054e0:	73fb      	strb	r3, [r7, #15]
 80054e2:	e022      	b.n	800552a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	1ad2      	subs	r2, r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d217      	bcs.n	800552a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	789b      	ldrb	r3, [r3, #2]
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	e010      	b.n	8005524 <sync_window+0x78>
					wsect += fs->fsize;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4413      	add	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	7858      	ldrb	r0, [r3, #1]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005516:	2301      	movs	r3, #1
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	f7ff fd1d 	bl	8004f58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	3b01      	subs	r3, #1
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d8eb      	bhi.n	8005502 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d01b      	beq.n	8005584 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff ffad 	bl	80054ac <sync_window>
 8005552:	4603      	mov	r3, r0
 8005554:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d113      	bne.n	8005584 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	7858      	ldrb	r0, [r3, #1]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005566:	2301      	movs	r3, #1
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	f7ff fcd5 	bl	8004f18 <disk_read>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d004      	beq.n	800557e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800557a:	2301      	movs	r3, #1
 800557c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff ff87 	bl	80054ac <sync_window>
 800559e:	4603      	mov	r3, r0
 80055a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d158      	bne.n	800565a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d148      	bne.n	8005642 <sync_fs+0xb2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	791b      	ldrb	r3, [r3, #4]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d144      	bne.n	8005642 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	3330      	adds	r3, #48	; 0x30
 80055bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c0:	2100      	movs	r1, #0
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fda9 	bl	800511a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3330      	adds	r3, #48	; 0x30
 80055cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80055d0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff fd38 	bl	800504a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3330      	adds	r3, #48	; 0x30
 80055de:	4921      	ldr	r1, [pc, #132]	; (8005664 <sync_fs+0xd4>)
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7ff fd4d 	bl	8005080 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3330      	adds	r3, #48	; 0x30
 80055ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80055ee:	491e      	ldr	r1, [pc, #120]	; (8005668 <sync_fs+0xd8>)
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff fd45 	bl	8005080 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3330      	adds	r3, #48	; 0x30
 80055fa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f7ff fd3b 	bl	8005080 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3330      	adds	r3, #48	; 0x30
 800560e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	4619      	mov	r1, r3
 8005618:	4610      	mov	r0, r2
 800561a:	f7ff fd31 	bl	8005080 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	7858      	ldrb	r0, [r3, #1]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005636:	2301      	movs	r3, #1
 8005638:	f7ff fc8e 	bl	8004f58 <disk_write>
			fs->fsi_flag = 0;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	785b      	ldrb	r3, [r3, #1]
 8005646:	2200      	movs	r2, #0
 8005648:	2100      	movs	r1, #0
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff fca4 	bl	8004f98 <disk_ioctl>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <sync_fs+0xca>
 8005656:	2301      	movs	r3, #1
 8005658:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800565a:	7bfb      	ldrb	r3, [r7, #15]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	41615252 	.word	0x41615252
 8005668:	61417272 	.word	0x61417272

0800566c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	3b02      	subs	r3, #2
 800567a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	3b02      	subs	r3, #2
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d301      	bcc.n	800568c <clust2sect+0x20>
 8005688:	2300      	movs	r3, #0
 800568a:	e008      	b.n	800569e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	895b      	ldrh	r3, [r3, #10]
 8005690:	461a      	mov	r2, r3
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	fb03 f202 	mul.w	r2, r3, r2
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569c:	4413      	add	r3, r2
}
 800569e:	4618      	mov	r0, r3
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b086      	sub	sp, #24
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d904      	bls.n	80056ca <get_fat+0x20>
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d302      	bcc.n	80056d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80056ca:	2301      	movs	r3, #1
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	e08f      	b.n	80057f0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80056d0:	f04f 33ff 	mov.w	r3, #4294967295
 80056d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d062      	beq.n	80057a4 <get_fat+0xfa>
 80056de:	2b03      	cmp	r3, #3
 80056e0:	dc7c      	bgt.n	80057dc <get_fat+0x132>
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d002      	beq.n	80056ec <get_fat+0x42>
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d042      	beq.n	8005770 <get_fat+0xc6>
 80056ea:	e077      	b.n	80057dc <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	085b      	lsrs	r3, r3, #1
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4413      	add	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	6a1a      	ldr	r2, [r3, #32]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	0a5b      	lsrs	r3, r3, #9
 8005702:	4413      	add	r3, r2
 8005704:	4619      	mov	r1, r3
 8005706:	6938      	ldr	r0, [r7, #16]
 8005708:	f7ff ff14 	bl	8005534 <move_window>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d167      	bne.n	80057e2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	60fa      	str	r2, [r7, #12]
 8005718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4413      	add	r3, r2
 8005720:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005724:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	6a1a      	ldr	r2, [r3, #32]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	0a5b      	lsrs	r3, r3, #9
 800572e:	4413      	add	r3, r2
 8005730:	4619      	mov	r1, r3
 8005732:	6938      	ldr	r0, [r7, #16]
 8005734:	f7ff fefe 	bl	8005534 <move_window>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d153      	bne.n	80057e6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800574c:	021b      	lsls	r3, r3, #8
 800574e:	461a      	mov	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4313      	orrs	r3, r2
 8005754:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <get_fat+0xbc>
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	091b      	lsrs	r3, r3, #4
 8005764:	e002      	b.n	800576c <get_fat+0xc2>
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800576c:	617b      	str	r3, [r7, #20]
			break;
 800576e:	e03f      	b.n	80057f0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	6a1a      	ldr	r2, [r3, #32]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	0a1b      	lsrs	r3, r3, #8
 8005778:	4413      	add	r3, r2
 800577a:	4619      	mov	r1, r3
 800577c:	6938      	ldr	r0, [r7, #16]
 800577e:	f7ff fed9 	bl	8005534 <move_window>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d130      	bne.n	80057ea <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	005b      	lsls	r3, r3, #1
 8005792:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005796:	4413      	add	r3, r2
 8005798:	4618      	mov	r0, r3
 800579a:	f7ff fc1b 	bl	8004fd4 <ld_word>
 800579e:	4603      	mov	r3, r0
 80057a0:	617b      	str	r3, [r7, #20]
			break;
 80057a2:	e025      	b.n	80057f0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	6a1a      	ldr	r2, [r3, #32]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	09db      	lsrs	r3, r3, #7
 80057ac:	4413      	add	r3, r2
 80057ae:	4619      	mov	r1, r3
 80057b0:	6938      	ldr	r0, [r7, #16]
 80057b2:	f7ff febf 	bl	8005534 <move_window>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d118      	bne.n	80057ee <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80057ca:	4413      	add	r3, r2
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff fc19 	bl	8005004 <ld_dword>
 80057d2:	4603      	mov	r3, r0
 80057d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057d8:	617b      	str	r3, [r7, #20]
			break;
 80057da:	e009      	b.n	80057f0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80057dc:	2301      	movs	r3, #1
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	e006      	b.n	80057f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057e2:	bf00      	nop
 80057e4:	e004      	b.n	80057f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057e6:	bf00      	nop
 80057e8:	e002      	b.n	80057f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80057ee:	bf00      	nop
		}
	}

	return val;
 80057f0:	697b      	ldr	r3, [r7, #20]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80057fa:	b590      	push	{r4, r7, lr}
 80057fc:	b089      	sub	sp, #36	; 0x24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005806:	2302      	movs	r3, #2
 8005808:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b01      	cmp	r3, #1
 800580e:	f240 80d2 	bls.w	80059b6 <put_fat+0x1bc>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	68ba      	ldr	r2, [r7, #8]
 8005818:	429a      	cmp	r2, r3
 800581a:	f080 80cc 	bcs.w	80059b6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b03      	cmp	r3, #3
 8005824:	f000 8096 	beq.w	8005954 <put_fat+0x15a>
 8005828:	2b03      	cmp	r3, #3
 800582a:	f300 80cd 	bgt.w	80059c8 <put_fat+0x1ce>
 800582e:	2b01      	cmp	r3, #1
 8005830:	d002      	beq.n	8005838 <put_fat+0x3e>
 8005832:	2b02      	cmp	r3, #2
 8005834:	d06e      	beq.n	8005914 <put_fat+0x11a>
 8005836:	e0c7      	b.n	80059c8 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	4413      	add	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a1a      	ldr	r2, [r3, #32]
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	0a5b      	lsrs	r3, r3, #9
 800584e:	4413      	add	r3, r2
 8005850:	4619      	mov	r1, r3
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7ff fe6e 	bl	8005534 <move_window>
 8005858:	4603      	mov	r3, r0
 800585a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800585c:	7ffb      	ldrb	r3, [r7, #31]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f040 80ab 	bne.w	80059ba <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	1c59      	adds	r1, r3, #1
 800586e:	61b9      	str	r1, [r7, #24]
 8005870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005874:	4413      	add	r3, r2
 8005876:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00d      	beq.n	800589e <put_fat+0xa4>
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	b25b      	sxtb	r3, r3
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	b25a      	sxtb	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	b25b      	sxtb	r3, r3
 8005896:	4313      	orrs	r3, r2
 8005898:	b25b      	sxtb	r3, r3
 800589a:	b2db      	uxtb	r3, r3
 800589c:	e001      	b.n	80058a2 <put_fat+0xa8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a1a      	ldr	r2, [r3, #32]
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	0a5b      	lsrs	r3, r3, #9
 80058b4:	4413      	add	r3, r2
 80058b6:	4619      	mov	r1, r3
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff fe3b 	bl	8005534 <move_window>
 80058be:	4603      	mov	r3, r0
 80058c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80058c2:	7ffb      	ldrb	r3, [r7, #31]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d17a      	bne.n	80059be <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d4:	4413      	add	r3, r2
 80058d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <put_fat+0xf0>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	091b      	lsrs	r3, r3, #4
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	e00e      	b.n	8005908 <put_fat+0x10e>
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	b25b      	sxtb	r3, r3
 80058f0:	f023 030f 	bic.w	r3, r3, #15
 80058f4:	b25a      	sxtb	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	0a1b      	lsrs	r3, r3, #8
 80058fa:	b25b      	sxtb	r3, r3
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	b25b      	sxtb	r3, r3
 8005902:	4313      	orrs	r3, r2
 8005904:	b25b      	sxtb	r3, r3
 8005906:	b2db      	uxtb	r3, r3
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	70da      	strb	r2, [r3, #3]
			break;
 8005912:	e059      	b.n	80059c8 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a1a      	ldr	r2, [r3, #32]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	0a1b      	lsrs	r3, r3, #8
 800591c:	4413      	add	r3, r2
 800591e:	4619      	mov	r1, r3
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f7ff fe07 	bl	8005534 <move_window>
 8005926:	4603      	mov	r3, r0
 8005928:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800592a:	7ffb      	ldrb	r3, [r7, #31]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d148      	bne.n	80059c2 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800593e:	4413      	add	r3, r2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	b292      	uxth	r2, r2
 8005944:	4611      	mov	r1, r2
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff fb7f 	bl	800504a <st_word>
			fs->wflag = 1;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	70da      	strb	r2, [r3, #3]
			break;
 8005952:	e039      	b.n	80059c8 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6a1a      	ldr	r2, [r3, #32]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	09db      	lsrs	r3, r3, #7
 800595c:	4413      	add	r3, r2
 800595e:	4619      	mov	r1, r3
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f7ff fde7 	bl	8005534 <move_window>
 8005966:	4603      	mov	r3, r0
 8005968:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800596a:	7ffb      	ldrb	r3, [r7, #31]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d12a      	bne.n	80059c6 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005984:	4413      	add	r3, r2
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fb3c 	bl	8005004 <ld_dword>
 800598c:	4603      	mov	r3, r0
 800598e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005992:	4323      	orrs	r3, r4
 8005994:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80059a4:	4413      	add	r3, r2
 80059a6:	6879      	ldr	r1, [r7, #4]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff fb69 	bl	8005080 <st_dword>
			fs->wflag = 1;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	70da      	strb	r2, [r3, #3]
			break;
 80059b4:	e008      	b.n	80059c8 <put_fat+0x1ce>
		}
	}
 80059b6:	bf00      	nop
 80059b8:	e006      	b.n	80059c8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80059ba:	bf00      	nop
 80059bc:	e004      	b.n	80059c8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80059be:	bf00      	nop
 80059c0:	e002      	b.n	80059c8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80059c2:	bf00      	nop
 80059c4:	e000      	b.n	80059c8 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80059c6:	bf00      	nop
	return res;
 80059c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3724      	adds	r7, #36	; 0x24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd90      	pop	{r4, r7, pc}

080059d2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b088      	sub	sp, #32
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d904      	bls.n	80059f8 <remove_chain+0x26>
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d301      	bcc.n	80059fc <remove_chain+0x2a>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e04b      	b.n	8005a94 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00c      	beq.n	8005a1c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005a02:	f04f 32ff 	mov.w	r2, #4294967295
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	69b8      	ldr	r0, [r7, #24]
 8005a0a:	f7ff fef6 	bl	80057fa <put_fat>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005a12:	7ffb      	ldrb	r3, [r7, #31]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d001      	beq.n	8005a1c <remove_chain+0x4a>
 8005a18:	7ffb      	ldrb	r3, [r7, #31]
 8005a1a:	e03b      	b.n	8005a94 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f7ff fe43 	bl	80056aa <get_fat>
 8005a24:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d031      	beq.n	8005a90 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <remove_chain+0x64>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e02e      	b.n	8005a94 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3c:	d101      	bne.n	8005a42 <remove_chain+0x70>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e028      	b.n	8005a94 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005a42:	2200      	movs	r2, #0
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	69b8      	ldr	r0, [r7, #24]
 8005a48:	f7ff fed7 	bl	80057fa <put_fat>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005a50:	7ffb      	ldrb	r3, [r7, #31]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d001      	beq.n	8005a5a <remove_chain+0x88>
 8005a56:	7ffb      	ldrb	r3, [r7, #31]
 8005a58:	e01c      	b.n	8005a94 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	3b02      	subs	r3, #2
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d20b      	bcs.n	8005a80 <remove_chain+0xae>
			fs->free_clst++;
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	791b      	ldrb	r3, [r3, #4]
 8005a76:	f043 0301 	orr.w	r3, r3, #1
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	68ba      	ldr	r2, [r7, #8]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d3c6      	bcc.n	8005a1c <remove_chain+0x4a>
 8005a8e:	e000      	b.n	8005a92 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005a90:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3720      	adds	r7, #32
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10d      	bne.n	8005ace <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d004      	beq.n	8005ac8 <create_chain+0x2c>
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d31b      	bcc.n	8005b00 <create_chain+0x64>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	61bb      	str	r3, [r7, #24]
 8005acc:	e018      	b.n	8005b00 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff fdea 	bl	80056aa <get_fat>
 8005ad6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d801      	bhi.n	8005ae2 <create_chain+0x46>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e070      	b.n	8005bc4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae8:	d101      	bne.n	8005aee <create_chain+0x52>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	e06a      	b.n	8005bc4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d201      	bcs.n	8005afc <create_chain+0x60>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	e063      	b.n	8005bc4 <create_chain+0x128>
		scl = clst;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	3301      	adds	r3, #1
 8005b08:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	69fa      	ldr	r2, [r7, #28]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d307      	bcc.n	8005b24 <create_chain+0x88>
				ncl = 2;
 8005b14:	2302      	movs	r3, #2
 8005b16:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d901      	bls.n	8005b24 <create_chain+0x88>
 8005b20:	2300      	movs	r3, #0
 8005b22:	e04f      	b.n	8005bc4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005b24:	69f9      	ldr	r1, [r7, #28]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff fdbf 	bl	80056aa <get_fat>
 8005b2c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00e      	beq.n	8005b52 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d003      	beq.n	8005b42 <create_chain+0xa6>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b40:	d101      	bne.n	8005b46 <create_chain+0xaa>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	e03e      	b.n	8005bc4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005b46:	69fa      	ldr	r2, [r7, #28]
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d1da      	bne.n	8005b04 <create_chain+0x68>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e038      	b.n	8005bc4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005b52:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005b54:	f04f 32ff 	mov.w	r2, #4294967295
 8005b58:	69f9      	ldr	r1, [r7, #28]
 8005b5a:	6938      	ldr	r0, [r7, #16]
 8005b5c:	f7ff fe4d 	bl	80057fa <put_fat>
 8005b60:	4603      	mov	r3, r0
 8005b62:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d109      	bne.n	8005b7e <create_chain+0xe2>
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d006      	beq.n	8005b7e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6938      	ldr	r0, [r7, #16]
 8005b76:	f7ff fe40 	bl	80057fa <put_fat>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d116      	bne.n	8005bb2 <create_chain+0x116>
		fs->last_clst = ncl;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	695b      	ldr	r3, [r3, #20]
 8005b92:	3b02      	subs	r3, #2
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d804      	bhi.n	8005ba2 <create_chain+0x106>
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	1e5a      	subs	r2, r3, #1
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	791b      	ldrb	r3, [r3, #4]
 8005ba6:	f043 0301 	orr.w	r3, r3, #1
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	711a      	strb	r2, [r3, #4]
 8005bb0:	e007      	b.n	8005bc2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d102      	bne.n	8005bbe <create_chain+0x122>
 8005bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bbc:	e000      	b.n	8005bc0 <create_chain+0x124>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005bc2:	69fb      	ldr	r3, [r7, #28]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3720      	adds	r7, #32
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	3304      	adds	r3, #4
 8005be2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	0a5b      	lsrs	r3, r3, #9
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	8952      	ldrh	r2, [r2, #10]
 8005bec:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1d1a      	adds	r2, r3, #4
 8005bf6:	613a      	str	r2, [r7, #16]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <clmt_clust+0x3a>
 8005c02:	2300      	movs	r3, #0
 8005c04:	e010      	b.n	8005c28 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d307      	bcc.n	8005c1e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005c1c:	e7e9      	b.n	8005bf2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005c1e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4413      	add	r3, r2
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c4a:	d204      	bcs.n	8005c56 <dir_sdi+0x22>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	f003 031f 	and.w	r3, r3, #31
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <dir_sdi+0x26>
		return FR_INT_ERR;
 8005c56:	2302      	movs	r3, #2
 8005c58:	e063      	b.n	8005d22 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d106      	bne.n	8005c7a <dir_sdi+0x46>
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d902      	bls.n	8005c7a <dir_sdi+0x46>
		clst = fs->dirbase;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10c      	bne.n	8005c9a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	095b      	lsrs	r3, r3, #5
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	8912      	ldrh	r2, [r2, #8]
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d301      	bcc.n	8005c90 <dir_sdi+0x5c>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e048      	b.n	8005d22 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	61da      	str	r2, [r3, #28]
 8005c98:	e029      	b.n	8005cee <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	895b      	ldrh	r3, [r3, #10]
 8005c9e:	025b      	lsls	r3, r3, #9
 8005ca0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005ca2:	e019      	b.n	8005cd8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6979      	ldr	r1, [r7, #20]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff fcfe 	bl	80056aa <get_fat>
 8005cae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb6:	d101      	bne.n	8005cbc <dir_sdi+0x88>
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e032      	b.n	8005d22 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d904      	bls.n	8005ccc <dir_sdi+0x98>
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d301      	bcc.n	8005cd0 <dir_sdi+0x9c>
 8005ccc:	2302      	movs	r3, #2
 8005cce:	e028      	b.n	8005d22 <dir_sdi+0xee>
			ofs -= csz;
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d2e1      	bcs.n	8005ca4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005ce0:	6979      	ldr	r1, [r7, #20]
 8005ce2:	6938      	ldr	r0, [r7, #16]
 8005ce4:	f7ff fcc2 	bl	800566c <clust2sect>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <dir_sdi+0xcc>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	e010      	b.n	8005d22 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	0a5b      	lsrs	r3, r3, #9
 8005d08:	441a      	add	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d1a:	441a      	add	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b086      	sub	sp, #24
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	3320      	adds	r3, #32
 8005d40:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <dir_next+0x28>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d50:	d301      	bcc.n	8005d56 <dir_next+0x2c>
 8005d52:	2304      	movs	r3, #4
 8005d54:	e0aa      	b.n	8005eac <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f040 8098 	bne.w	8005e92 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10b      	bne.n	8005d8c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	8912      	ldrh	r2, [r2, #8]
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	f0c0 8088 	bcc.w	8005e92 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	61da      	str	r2, [r3, #28]
 8005d88:	2304      	movs	r3, #4
 8005d8a:	e08f      	b.n	8005eac <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	0a5b      	lsrs	r3, r3, #9
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	8952      	ldrh	r2, [r2, #10]
 8005d94:	3a01      	subs	r2, #1
 8005d96:	4013      	ands	r3, r2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d17a      	bne.n	8005e92 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	4619      	mov	r1, r3
 8005da4:	4610      	mov	r0, r2
 8005da6:	f7ff fc80 	bl	80056aa <get_fat>
 8005daa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d801      	bhi.n	8005db6 <dir_next+0x8c>
 8005db2:	2302      	movs	r3, #2
 8005db4:	e07a      	b.n	8005eac <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbc:	d101      	bne.n	8005dc2 <dir_next+0x98>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e074      	b.n	8005eac <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d358      	bcc.n	8005e7e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d104      	bne.n	8005ddc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	61da      	str	r2, [r3, #28]
 8005dd8:	2304      	movs	r3, #4
 8005dda:	e067      	b.n	8005eac <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	4619      	mov	r1, r3
 8005de4:	4610      	mov	r0, r2
 8005de6:	f7ff fe59 	bl	8005a9c <create_chain>
 8005dea:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <dir_next+0xcc>
 8005df2:	2307      	movs	r3, #7
 8005df4:	e05a      	b.n	8005eac <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <dir_next+0xd6>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e055      	b.n	8005eac <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e06:	d101      	bne.n	8005e0c <dir_next+0xe2>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e04f      	b.n	8005eac <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff fb4d 	bl	80054ac <sync_window>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <dir_next+0xf2>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e047      	b.n	8005eac <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3330      	adds	r3, #48	; 0x30
 8005e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e24:	2100      	movs	r1, #0
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff f977 	bl	800511a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	613b      	str	r3, [r7, #16]
 8005e30:	6979      	ldr	r1, [r7, #20]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f7ff fc1a 	bl	800566c <clust2sect>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e3e:	e012      	b.n	8005e66 <dir_next+0x13c>
						fs->wflag = 1;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2201      	movs	r2, #1
 8005e44:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f7ff fb30 	bl	80054ac <sync_window>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <dir_next+0x12c>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e02a      	b.n	8005eac <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	895b      	ldrh	r3, [r3, #10]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d3e6      	bcc.n	8005e40 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad2      	subs	r2, r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	697a      	ldr	r2, [r7, #20]
 8005e82:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005e84:	6979      	ldr	r1, [r7, #20]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f7ff fbf0 	bl	800566c <clust2sect>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ea4:	441a      	add	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff feb4 	bl	8005c34 <dir_sdi>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d12b      	bne.n	8005f2e <dir_alloc+0x7a>
		n = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f7ff fb27 	bl	8005534 <move_window>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005eea:	7dfb      	ldrb	r3, [r7, #23]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d11d      	bne.n	8005f2c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2be5      	cmp	r3, #229	; 0xe5
 8005ef8:	d004      	beq.n	8005f04 <dir_alloc+0x50>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d107      	bne.n	8005f14 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	3301      	adds	r3, #1
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d102      	bne.n	8005f18 <dir_alloc+0x64>
 8005f12:	e00c      	b.n	8005f2e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005f18:	2101      	movs	r1, #1
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff ff05 	bl	8005d2a <dir_next>
 8005f20:	4603      	mov	r3, r0
 8005f22:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d0d7      	beq.n	8005eda <dir_alloc+0x26>
 8005f2a:	e000      	b.n	8005f2e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005f2c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005f2e:	7dfb      	ldrb	r3, [r7, #23]
 8005f30:	2b04      	cmp	r3, #4
 8005f32:	d101      	bne.n	8005f38 <dir_alloc+0x84>
 8005f34:	2307      	movs	r3, #7
 8005f36:	75fb      	strb	r3, [r7, #23]
	return res;
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
 8005f4a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	331a      	adds	r3, #26
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff f83f 	bl	8004fd4 <ld_word>
 8005f56:	4603      	mov	r3, r0
 8005f58:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d109      	bne.n	8005f76 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	3314      	adds	r3, #20
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff f834 	bl	8004fd4 <ld_word>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	041b      	lsls	r3, r3, #16
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005f76:	68fb      	ldr	r3, [r7, #12]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	331a      	adds	r3, #26
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	b292      	uxth	r2, r2
 8005f94:	4611      	mov	r1, r2
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff f857 	bl	800504a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d109      	bne.n	8005fb8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	f103 0214 	add.w	r2, r3, #20
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	0c1b      	lsrs	r3, r3, #16
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	f7ff f849 	bl	800504a <st_word>
	}
}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005fca:	2304      	movs	r3, #4
 8005fcc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8005fd4:	e03c      	b.n	8006050 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6938      	ldr	r0, [r7, #16]
 8005fde:	f7ff faa9 	bl	8005534 <move_window>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005fe6:	7dfb      	ldrb	r3, [r7, #23]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d136      	bne.n	800605a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d102      	bne.n	8006000 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8005ffa:	2304      	movs	r3, #4
 8005ffc:	75fb      	strb	r3, [r7, #23]
 8005ffe:	e031      	b.n	8006064 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	330b      	adds	r3, #11
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800600c:	73bb      	strb	r3, [r7, #14]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	7bba      	ldrb	r2, [r7, #14]
 8006012:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2be5      	cmp	r3, #229	; 0xe5
 8006018:	d011      	beq.n	800603e <dir_read+0x7e>
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	2b2e      	cmp	r3, #46	; 0x2e
 800601e:	d00e      	beq.n	800603e <dir_read+0x7e>
 8006020:	7bbb      	ldrb	r3, [r7, #14]
 8006022:	2b0f      	cmp	r3, #15
 8006024:	d00b      	beq.n	800603e <dir_read+0x7e>
 8006026:	7bbb      	ldrb	r3, [r7, #14]
 8006028:	f023 0320 	bic.w	r3, r3, #32
 800602c:	2b08      	cmp	r3, #8
 800602e:	bf0c      	ite	eq
 8006030:	2301      	moveq	r3, #1
 8006032:	2300      	movne	r3, #0
 8006034:	b2db      	uxtb	r3, r3
 8006036:	461a      	mov	r2, r3
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	4293      	cmp	r3, r2
 800603c:	d00f      	beq.n	800605e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800603e:	2100      	movs	r1, #0
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff fe72 	bl	8005d2a <dir_next>
 8006046:	4603      	mov	r3, r0
 8006048:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800604a:	7dfb      	ldrb	r3, [r7, #23]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d108      	bne.n	8006062 <dir_read+0xa2>
	while (dp->sect) {
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1be      	bne.n	8005fd6 <dir_read+0x16>
 8006058:	e004      	b.n	8006064 <dir_read+0xa4>
		if (res != FR_OK) break;
 800605a:	bf00      	nop
 800605c:	e002      	b.n	8006064 <dir_read+0xa4>
				break;
 800605e:	bf00      	nop
 8006060:	e000      	b.n	8006064 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006062:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <dir_read+0xb0>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	61da      	str	r2, [r3, #28]
	return res;
 8006070:	7dfb      	ldrb	r3, [r7, #23]
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800607a:	b580      	push	{r7, lr}
 800607c:	b086      	sub	sp, #24
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006088:	2100      	movs	r1, #0
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff fdd2 	bl	8005c34 <dir_sdi>
 8006090:	4603      	mov	r3, r0
 8006092:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006094:	7dfb      	ldrb	r3, [r7, #23]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <dir_find+0x24>
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	e03e      	b.n	800611c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	4619      	mov	r1, r3
 80060a4:	6938      	ldr	r0, [r7, #16]
 80060a6:	f7ff fa45 	bl	8005534 <move_window>
 80060aa:	4603      	mov	r3, r0
 80060ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80060ae:	7dfb      	ldrb	r3, [r7, #23]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d12f      	bne.n	8006114 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d102      	bne.n	80060c8 <dir_find+0x4e>
 80060c2:	2304      	movs	r3, #4
 80060c4:	75fb      	strb	r3, [r7, #23]
 80060c6:	e028      	b.n	800611a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	330b      	adds	r3, #11
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	330b      	adds	r3, #11
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10a      	bne.n	8006100 <dir_find+0x86>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a18      	ldr	r0, [r3, #32]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3324      	adds	r3, #36	; 0x24
 80060f2:	220b      	movs	r2, #11
 80060f4:	4619      	mov	r1, r3
 80060f6:	f7ff f82b 	bl	8005150 <mem_cmp>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00b      	beq.n	8006118 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006100:	2100      	movs	r1, #0
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f7ff fe11 	bl	8005d2a <dir_next>
 8006108:	4603      	mov	r3, r0
 800610a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0c5      	beq.n	800609e <dir_find+0x24>
 8006112:	e002      	b.n	800611a <dir_find+0xa0>
		if (res != FR_OK) break;
 8006114:	bf00      	nop
 8006116:	e000      	b.n	800611a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006118:	bf00      	nop

	return res;
 800611a:	7dfb      	ldrb	r3, [r7, #23]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006132:	2101      	movs	r1, #1
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff febd 	bl	8005eb4 <dir_alloc>
 800613a:	4603      	mov	r3, r0
 800613c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d11c      	bne.n	800617e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	4619      	mov	r1, r3
 800614a:	68b8      	ldr	r0, [r7, #8]
 800614c:	f7ff f9f2 	bl	8005534 <move_window>
 8006150:	4603      	mov	r3, r0
 8006152:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d111      	bne.n	800617e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a1b      	ldr	r3, [r3, #32]
 800615e:	2220      	movs	r2, #32
 8006160:	2100      	movs	r1, #0
 8006162:	4618      	mov	r0, r3
 8006164:	f7fe ffd9 	bl	800511a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a18      	ldr	r0, [r3, #32]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3324      	adds	r3, #36	; 0x24
 8006170:	220b      	movs	r2, #11
 8006172:	4619      	mov	r1, r3
 8006174:	f7fe ffb0 	bl	80050d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2201      	movs	r2, #1
 800617c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800617e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2200      	movs	r2, #0
 8006196:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d04e      	beq.n	800623e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80061a8:	e021      	b.n	80061ee <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1a      	ldr	r2, [r3, #32]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	1c59      	adds	r1, r3, #1
 80061b2:	6179      	str	r1, [r7, #20]
 80061b4:	4413      	add	r3, r2
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d100      	bne.n	80061c2 <get_fileinfo+0x3a>
 80061c0:	e015      	b.n	80061ee <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	2b05      	cmp	r3, #5
 80061c6:	d101      	bne.n	80061cc <get_fileinfo+0x44>
 80061c8:	23e5      	movs	r3, #229	; 0xe5
 80061ca:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2b09      	cmp	r3, #9
 80061d0:	d106      	bne.n	80061e0 <get_fileinfo+0x58>
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	613a      	str	r2, [r7, #16]
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	4413      	add	r3, r2
 80061dc:	222e      	movs	r2, #46	; 0x2e
 80061de:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	613a      	str	r2, [r7, #16]
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	4413      	add	r3, r2
 80061ea:	7bfa      	ldrb	r2, [r7, #15]
 80061ec:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b0a      	cmp	r3, #10
 80061f2:	d9da      	bls.n	80061aa <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4413      	add	r3, r2
 80061fa:	3309      	adds	r3, #9
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	7ada      	ldrb	r2, [r3, #11]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	331c      	adds	r3, #28
 8006210:	4618      	mov	r0, r3
 8006212:	f7fe fef7 	bl	8005004 <ld_dword>
 8006216:	4602      	mov	r2, r0
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	3316      	adds	r3, #22
 8006222:	4618      	mov	r0, r3
 8006224:	f7fe feee 	bl	8005004 <ld_dword>
 8006228:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	b29a      	uxth	r2, r3
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	80da      	strh	r2, [r3, #6]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	0c1b      	lsrs	r3, r3, #16
 8006236:	b29a      	uxth	r2, r3
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	809a      	strh	r2, [r3, #4]
 800623c:	e000      	b.n	8006240 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800623e:	bf00      	nop
}
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	60fb      	str	r3, [r7, #12]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3324      	adds	r3, #36	; 0x24
 800625c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800625e:	220b      	movs	r2, #11
 8006260:	2120      	movs	r1, #32
 8006262:	68b8      	ldr	r0, [r7, #8]
 8006264:	f7fe ff59 	bl	800511a <mem_set>
	si = i = 0; ni = 8;
 8006268:	2300      	movs	r3, #0
 800626a:	613b      	str	r3, [r7, #16]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	61fb      	str	r3, [r7, #28]
 8006270:	2308      	movs	r3, #8
 8006272:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	61fa      	str	r2, [r7, #28]
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	4413      	add	r3, r2
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006282:	7efb      	ldrb	r3, [r7, #27]
 8006284:	2b20      	cmp	r3, #32
 8006286:	d94e      	bls.n	8006326 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006288:	7efb      	ldrb	r3, [r7, #27]
 800628a:	2b2f      	cmp	r3, #47	; 0x2f
 800628c:	d006      	beq.n	800629c <create_name+0x54>
 800628e:	7efb      	ldrb	r3, [r7, #27]
 8006290:	2b5c      	cmp	r3, #92	; 0x5c
 8006292:	d110      	bne.n	80062b6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006294:	e002      	b.n	800629c <create_name+0x54>
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	3301      	adds	r3, #1
 800629a:	61fb      	str	r3, [r7, #28]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b2f      	cmp	r3, #47	; 0x2f
 80062a6:	d0f6      	beq.n	8006296 <create_name+0x4e>
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b5c      	cmp	r3, #92	; 0x5c
 80062b2:	d0f0      	beq.n	8006296 <create_name+0x4e>
			break;
 80062b4:	e038      	b.n	8006328 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80062b6:	7efb      	ldrb	r3, [r7, #27]
 80062b8:	2b2e      	cmp	r3, #46	; 0x2e
 80062ba:	d003      	beq.n	80062c4 <create_name+0x7c>
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d30c      	bcc.n	80062de <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2b0b      	cmp	r3, #11
 80062c8:	d002      	beq.n	80062d0 <create_name+0x88>
 80062ca:	7efb      	ldrb	r3, [r7, #27]
 80062cc:	2b2e      	cmp	r3, #46	; 0x2e
 80062ce:	d001      	beq.n	80062d4 <create_name+0x8c>
 80062d0:	2306      	movs	r3, #6
 80062d2:	e044      	b.n	800635e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80062d4:	2308      	movs	r3, #8
 80062d6:	613b      	str	r3, [r7, #16]
 80062d8:	230b      	movs	r3, #11
 80062da:	617b      	str	r3, [r7, #20]
			continue;
 80062dc:	e022      	b.n	8006324 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80062de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	da04      	bge.n	80062f0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80062e6:	7efb      	ldrb	r3, [r7, #27]
 80062e8:	3b80      	subs	r3, #128	; 0x80
 80062ea:	4a1f      	ldr	r2, [pc, #124]	; (8006368 <create_name+0x120>)
 80062ec:	5cd3      	ldrb	r3, [r2, r3]
 80062ee:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80062f0:	7efb      	ldrb	r3, [r7, #27]
 80062f2:	4619      	mov	r1, r3
 80062f4:	481d      	ldr	r0, [pc, #116]	; (800636c <create_name+0x124>)
 80062f6:	f7fe ff52 	bl	800519e <chk_chr>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <create_name+0xbc>
 8006300:	2306      	movs	r3, #6
 8006302:	e02c      	b.n	800635e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006304:	7efb      	ldrb	r3, [r7, #27]
 8006306:	2b60      	cmp	r3, #96	; 0x60
 8006308:	d905      	bls.n	8006316 <create_name+0xce>
 800630a:	7efb      	ldrb	r3, [r7, #27]
 800630c:	2b7a      	cmp	r3, #122	; 0x7a
 800630e:	d802      	bhi.n	8006316 <create_name+0xce>
 8006310:	7efb      	ldrb	r3, [r7, #27]
 8006312:	3b20      	subs	r3, #32
 8006314:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	1c5a      	adds	r2, r3, #1
 800631a:	613a      	str	r2, [r7, #16]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	4413      	add	r3, r2
 8006320:	7efa      	ldrb	r2, [r7, #27]
 8006322:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006324:	e7a6      	b.n	8006274 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006326:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	441a      	add	r2, r3
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <create_name+0xf4>
 8006338:	2306      	movs	r3, #6
 800633a:	e010      	b.n	800635e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2be5      	cmp	r3, #229	; 0xe5
 8006342:	d102      	bne.n	800634a <create_name+0x102>
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	2205      	movs	r2, #5
 8006348:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800634a:	7efb      	ldrb	r3, [r7, #27]
 800634c:	2b20      	cmp	r3, #32
 800634e:	d801      	bhi.n	8006354 <create_name+0x10c>
 8006350:	2204      	movs	r2, #4
 8006352:	e000      	b.n	8006356 <create_name+0x10e>
 8006354:	2200      	movs	r2, #0
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	330b      	adds	r3, #11
 800635a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800635c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800635e:	4618      	mov	r0, r3
 8006360:	3720      	adds	r7, #32
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	08007620 	.word	0x08007620
 800636c:	080075b0 	.word	0x080075b0

08006370 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006384:	e002      	b.n	800638c <follow_path+0x1c>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b2f      	cmp	r3, #47	; 0x2f
 8006392:	d0f8      	beq.n	8006386 <follow_path+0x16>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b5c      	cmp	r3, #92	; 0x5c
 800639a:	d0f4      	beq.n	8006386 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2200      	movs	r2, #0
 80063a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b1f      	cmp	r3, #31
 80063a8:	d80a      	bhi.n	80063c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2280      	movs	r2, #128	; 0x80
 80063ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80063b2:	2100      	movs	r1, #0
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff fc3d 	bl	8005c34 <dir_sdi>
 80063ba:	4603      	mov	r3, r0
 80063bc:	75fb      	strb	r3, [r7, #23]
 80063be:	e043      	b.n	8006448 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80063c0:	463b      	mov	r3, r7
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7ff ff3f 	bl	8006248 <create_name>
 80063ca:	4603      	mov	r3, r0
 80063cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d134      	bne.n	800643e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff fe50 	bl	800607a <dir_find>
 80063da:	4603      	mov	r3, r0
 80063dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80063e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80063ec:	7dfb      	ldrb	r3, [r7, #23]
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d127      	bne.n	8006442 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80063f2:	7afb      	ldrb	r3, [r7, #11]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d122      	bne.n	8006442 <follow_path+0xd2>
 80063fc:	2305      	movs	r3, #5
 80063fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006400:	e01f      	b.n	8006442 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006402:	7afb      	ldrb	r3, [r7, #11]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	d11c      	bne.n	8006446 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	799b      	ldrb	r3, [r3, #6]
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b00      	cmp	r3, #0
 8006416:	d102      	bne.n	800641e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006418:	2305      	movs	r3, #5
 800641a:	75fb      	strb	r3, [r7, #23]
 800641c:	e014      	b.n	8006448 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642c:	4413      	add	r3, r2
 800642e:	4619      	mov	r1, r3
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f7ff fd86 	bl	8005f42 <ld_clust>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800643c:	e7c0      	b.n	80063c0 <follow_path+0x50>
			if (res != FR_OK) break;
 800643e:	bf00      	nop
 8006440:	e002      	b.n	8006448 <follow_path+0xd8>
				break;
 8006442:	bf00      	nop
 8006444:	e000      	b.n	8006448 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006446:	bf00      	nop
			}
		}
	}

	return res;
 8006448:	7dfb      	ldrb	r3, [r7, #23]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3718      	adds	r7, #24
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006452:	b480      	push	{r7}
 8006454:	b087      	sub	sp, #28
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800645a:	f04f 33ff 	mov.w	r3, #4294967295
 800645e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d031      	beq.n	80064cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	617b      	str	r3, [r7, #20]
 800646e:	e002      	b.n	8006476 <get_ldnumber+0x24>
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	3301      	adds	r3, #1
 8006474:	617b      	str	r3, [r7, #20]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b20      	cmp	r3, #32
 800647c:	d903      	bls.n	8006486 <get_ldnumber+0x34>
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b3a      	cmp	r3, #58	; 0x3a
 8006484:	d1f4      	bne.n	8006470 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2b3a      	cmp	r3, #58	; 0x3a
 800648c:	d11c      	bne.n	80064c8 <get_ldnumber+0x76>
			tp = *path;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	60fa      	str	r2, [r7, #12]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	3b30      	subs	r3, #48	; 0x30
 800649e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b09      	cmp	r3, #9
 80064a4:	d80e      	bhi.n	80064c4 <get_ldnumber+0x72>
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d10a      	bne.n	80064c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d107      	bne.n	80064c4 <get_ldnumber+0x72>
					vol = (int)i;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	3301      	adds	r3, #1
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	e002      	b.n	80064ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80064c8:	2300      	movs	r3, #0
 80064ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80064cc:	693b      	ldr	r3, [r7, #16]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
	...

080064dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	70da      	strb	r2, [r3, #3]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f04f 32ff 	mov.w	r2, #4294967295
 80064f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff f81c 	bl	8005534 <move_window>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <check_fs+0x2a>
 8006502:	2304      	movs	r3, #4
 8006504:	e038      	b.n	8006578 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3330      	adds	r3, #48	; 0x30
 800650a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800650e:	4618      	mov	r0, r3
 8006510:	f7fe fd60 	bl	8004fd4 <ld_word>
 8006514:	4603      	mov	r3, r0
 8006516:	461a      	mov	r2, r3
 8006518:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800651c:	429a      	cmp	r2, r3
 800651e:	d001      	beq.n	8006524 <check_fs+0x48>
 8006520:	2303      	movs	r3, #3
 8006522:	e029      	b.n	8006578 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800652a:	2be9      	cmp	r3, #233	; 0xe9
 800652c:	d009      	beq.n	8006542 <check_fs+0x66>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006534:	2beb      	cmp	r3, #235	; 0xeb
 8006536:	d11e      	bne.n	8006576 <check_fs+0x9a>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800653e:	2b90      	cmp	r3, #144	; 0x90
 8006540:	d119      	bne.n	8006576 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3330      	adds	r3, #48	; 0x30
 8006546:	3336      	adds	r3, #54	; 0x36
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe fd5b 	bl	8005004 <ld_dword>
 800654e:	4603      	mov	r3, r0
 8006550:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006554:	4a0a      	ldr	r2, [pc, #40]	; (8006580 <check_fs+0xa4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d101      	bne.n	800655e <check_fs+0x82>
 800655a:	2300      	movs	r3, #0
 800655c:	e00c      	b.n	8006578 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3330      	adds	r3, #48	; 0x30
 8006562:	3352      	adds	r3, #82	; 0x52
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe fd4d 	bl	8005004 <ld_dword>
 800656a:	4603      	mov	r3, r0
 800656c:	4a05      	ldr	r2, [pc, #20]	; (8006584 <check_fs+0xa8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d101      	bne.n	8006576 <check_fs+0x9a>
 8006572:	2300      	movs	r3, #0
 8006574:	e000      	b.n	8006578 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006576:	2302      	movs	r3, #2
}
 8006578:	4618      	mov	r0, r3
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	00544146 	.word	0x00544146
 8006584:	33544146 	.word	0x33544146

08006588 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b096      	sub	sp, #88	; 0x58
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	4613      	mov	r3, r2
 8006594:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2200      	movs	r2, #0
 800659a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f7ff ff58 	bl	8006452 <get_ldnumber>
 80065a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80065a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	da01      	bge.n	80065ae <find_volume+0x26>
 80065aa:	230b      	movs	r3, #11
 80065ac:	e22d      	b.n	8006a0a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80065ae:	4aa1      	ldr	r2, [pc, #644]	; (8006834 <find_volume+0x2ac>)
 80065b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80065b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <find_volume+0x3a>
 80065be:	230c      	movs	r3, #12
 80065c0:	e223      	b.n	8006a0a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80065c8:	79fb      	ldrb	r3, [r7, #7]
 80065ca:	f023 0301 	bic.w	r3, r3, #1
 80065ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80065d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01a      	beq.n	800660e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	785b      	ldrb	r3, [r3, #1]
 80065dc:	4618      	mov	r0, r3
 80065de:	f7fe fc5b 	bl	8004e98 <disk_status>
 80065e2:	4603      	mov	r3, r0
 80065e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80065e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10c      	bne.n	800660e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80065f4:	79fb      	ldrb	r3, [r7, #7]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <find_volume+0x82>
 80065fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006606:	230a      	movs	r3, #10
 8006608:	e1ff      	b.n	8006a0a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800660a:	2300      	movs	r3, #0
 800660c:	e1fd      	b.n	8006a0a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006616:	b2da      	uxtb	r2, r3
 8006618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800661c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	4618      	mov	r0, r3
 8006622:	f7fe fc53 	bl	8004ecc <disk_initialize>
 8006626:	4603      	mov	r3, r0
 8006628:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800662c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006638:	2303      	movs	r3, #3
 800663a:	e1e6      	b.n	8006a0a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800663c:	79fb      	ldrb	r3, [r7, #7]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d007      	beq.n	8006652 <find_volume+0xca>
 8006642:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006646:	f003 0304 	and.w	r3, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800664e:	230a      	movs	r3, #10
 8006650:	e1db      	b.n	8006a0a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006656:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006658:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800665a:	f7ff ff3f 	bl	80064dc <check_fs>
 800665e:	4603      	mov	r3, r0
 8006660:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006664:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006668:	2b02      	cmp	r3, #2
 800666a:	d149      	bne.n	8006700 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800666c:	2300      	movs	r3, #0
 800666e:	643b      	str	r3, [r7, #64]	; 0x40
 8006670:	e01e      	b.n	80066b0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006674:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006680:	4413      	add	r3, r2
 8006682:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006686:	3304      	adds	r3, #4
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d006      	beq.n	800669c <find_volume+0x114>
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	3308      	adds	r3, #8
 8006692:	4618      	mov	r0, r3
 8006694:	f7fe fcb6 	bl	8005004 <ld_dword>
 8006698:	4602      	mov	r2, r0
 800669a:	e000      	b.n	800669e <find_volume+0x116>
 800669c:	2200      	movs	r2, #0
 800669e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	3358      	adds	r3, #88	; 0x58
 80066a4:	443b      	add	r3, r7
 80066a6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80066aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ac:	3301      	adds	r3, #1
 80066ae:	643b      	str	r3, [r7, #64]	; 0x40
 80066b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d9dd      	bls.n	8006672 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80066b6:	2300      	movs	r3, #0
 80066b8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80066ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <find_volume+0x13e>
 80066c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c2:	3b01      	subs	r3, #1
 80066c4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80066c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	3358      	adds	r3, #88	; 0x58
 80066cc:	443b      	add	r3, r7
 80066ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80066d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80066d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <find_volume+0x15e>
 80066da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066de:	f7ff fefd 	bl	80064dc <check_fs>
 80066e2:	4603      	mov	r3, r0
 80066e4:	e000      	b.n	80066e8 <find_volume+0x160>
 80066e6:	2303      	movs	r3, #3
 80066e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80066ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d905      	bls.n	8006700 <find_volume+0x178>
 80066f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f6:	3301      	adds	r3, #1
 80066f8:	643b      	str	r3, [r7, #64]	; 0x40
 80066fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fc:	2b03      	cmp	r3, #3
 80066fe:	d9e2      	bls.n	80066c6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006700:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006704:	2b04      	cmp	r3, #4
 8006706:	d101      	bne.n	800670c <find_volume+0x184>
 8006708:	2301      	movs	r3, #1
 800670a:	e17e      	b.n	8006a0a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800670c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006710:	2b01      	cmp	r3, #1
 8006712:	d901      	bls.n	8006718 <find_volume+0x190>
 8006714:	230d      	movs	r3, #13
 8006716:	e178      	b.n	8006a0a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671a:	3330      	adds	r3, #48	; 0x30
 800671c:	330b      	adds	r3, #11
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe fc58 	bl	8004fd4 <ld_word>
 8006724:	4603      	mov	r3, r0
 8006726:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800672a:	d001      	beq.n	8006730 <find_volume+0x1a8>
 800672c:	230d      	movs	r3, #13
 800672e:	e16c      	b.n	8006a0a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	3330      	adds	r3, #48	; 0x30
 8006734:	3316      	adds	r3, #22
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe fc4c 	bl	8004fd4 <ld_word>
 800673c:	4603      	mov	r3, r0
 800673e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006742:	2b00      	cmp	r3, #0
 8006744:	d106      	bne.n	8006754 <find_volume+0x1cc>
 8006746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006748:	3330      	adds	r3, #48	; 0x30
 800674a:	3324      	adds	r3, #36	; 0x24
 800674c:	4618      	mov	r0, r3
 800674e:	f7fe fc59 	bl	8005004 <ld_dword>
 8006752:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006756:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006758:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006762:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	789b      	ldrb	r3, [r3, #2]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d005      	beq.n	8006778 <find_volume+0x1f0>
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	789b      	ldrb	r3, [r3, #2]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d001      	beq.n	8006778 <find_volume+0x1f0>
 8006774:	230d      	movs	r3, #13
 8006776:	e148      	b.n	8006a0a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	789b      	ldrb	r3, [r3, #2]
 800677c:	461a      	mov	r2, r3
 800677e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006780:	fb02 f303 	mul.w	r3, r2, r3
 8006784:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800678c:	b29a      	uxth	r2, r3
 800678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006790:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	895b      	ldrh	r3, [r3, #10]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d008      	beq.n	80067ac <find_volume+0x224>
 800679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679c:	895b      	ldrh	r3, [r3, #10]
 800679e:	461a      	mov	r2, r3
 80067a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a2:	895b      	ldrh	r3, [r3, #10]
 80067a4:	3b01      	subs	r3, #1
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <find_volume+0x228>
 80067ac:	230d      	movs	r3, #13
 80067ae:	e12c      	b.n	8006a0a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80067b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b2:	3330      	adds	r3, #48	; 0x30
 80067b4:	3311      	adds	r3, #17
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe fc0c 	bl	8004fd4 <ld_word>
 80067bc:	4603      	mov	r3, r0
 80067be:	461a      	mov	r2, r3
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80067c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c6:	891b      	ldrh	r3, [r3, #8]
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <find_volume+0x24e>
 80067d2:	230d      	movs	r3, #13
 80067d4:	e119      	b.n	8006a0a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	3330      	adds	r3, #48	; 0x30
 80067da:	3313      	adds	r3, #19
 80067dc:	4618      	mov	r0, r3
 80067de:	f7fe fbf9 	bl	8004fd4 <ld_word>
 80067e2:	4603      	mov	r3, r0
 80067e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80067e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d106      	bne.n	80067fa <find_volume+0x272>
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	3330      	adds	r3, #48	; 0x30
 80067f0:	3320      	adds	r3, #32
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe fc06 	bl	8005004 <ld_dword>
 80067f8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80067fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fc:	3330      	adds	r3, #48	; 0x30
 80067fe:	330e      	adds	r3, #14
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe fbe7 	bl	8004fd4 <ld_word>
 8006806:	4603      	mov	r3, r0
 8006808:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800680a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <find_volume+0x28c>
 8006810:	230d      	movs	r3, #13
 8006812:	e0fa      	b.n	8006a0a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006814:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006818:	4413      	add	r3, r2
 800681a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800681c:	8912      	ldrh	r2, [r2, #8]
 800681e:	0912      	lsrs	r2, r2, #4
 8006820:	b292      	uxth	r2, r2
 8006822:	4413      	add	r3, r2
 8006824:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006826:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	429a      	cmp	r2, r3
 800682c:	d204      	bcs.n	8006838 <find_volume+0x2b0>
 800682e:	230d      	movs	r3, #13
 8006830:	e0eb      	b.n	8006a0a <find_volume+0x482>
 8006832:	bf00      	nop
 8006834:	2000103c 	.word	0x2000103c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006838:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006840:	8952      	ldrh	r2, [r2, #10]
 8006842:	fbb3 f3f2 	udiv	r3, r3, r2
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <find_volume+0x2ca>
 800684e:	230d      	movs	r3, #13
 8006850:	e0db      	b.n	8006a0a <find_volume+0x482>
		fmt = FS_FAT32;
 8006852:	2303      	movs	r3, #3
 8006854:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800685e:	4293      	cmp	r3, r2
 8006860:	d802      	bhi.n	8006868 <find_volume+0x2e0>
 8006862:	2302      	movs	r3, #2
 8006864:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800686e:	4293      	cmp	r3, r2
 8006870:	d802      	bhi.n	8006878 <find_volume+0x2f0>
 8006872:	2301      	movs	r3, #1
 8006874:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	1c9a      	adds	r2, r3, #2
 800687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006884:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006886:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800688a:	441a      	add	r2, r3
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006890:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	441a      	add	r2, r3
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800689a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800689e:	2b03      	cmp	r3, #3
 80068a0:	d11e      	bne.n	80068e0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	3330      	adds	r3, #48	; 0x30
 80068a6:	332a      	adds	r3, #42	; 0x2a
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fe fb93 	bl	8004fd4 <ld_word>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <find_volume+0x330>
 80068b4:	230d      	movs	r3, #13
 80068b6:	e0a8      	b.n	8006a0a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	891b      	ldrh	r3, [r3, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <find_volume+0x33c>
 80068c0:	230d      	movs	r3, #13
 80068c2:	e0a2      	b.n	8006a0a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80068c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c6:	3330      	adds	r3, #48	; 0x30
 80068c8:	332c      	adds	r3, #44	; 0x2c
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7fe fb9a 	bl	8005004 <ld_dword>
 80068d0:	4602      	mov	r2, r0
 80068d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80068d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	647b      	str	r3, [r7, #68]	; 0x44
 80068de:	e01f      	b.n	8006920 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80068e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e2:	891b      	ldrh	r3, [r3, #8]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <find_volume+0x364>
 80068e8:	230d      	movs	r3, #13
 80068ea:	e08e      	b.n	8006a0a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	6a1a      	ldr	r2, [r3, #32]
 80068f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f2:	441a      	add	r2, r3
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80068f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d103      	bne.n	8006908 <find_volume+0x380>
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	e00a      	b.n	800691e <find_volume+0x396>
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	695a      	ldr	r2, [r3, #20]
 800690c:	4613      	mov	r3, r2
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	4413      	add	r3, r2
 8006912:	085a      	lsrs	r2, r3, #1
 8006914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800691e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	699a      	ldr	r2, [r3, #24]
 8006924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006926:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800692a:	0a5b      	lsrs	r3, r3, #9
 800692c:	429a      	cmp	r2, r3
 800692e:	d201      	bcs.n	8006934 <find_volume+0x3ac>
 8006930:	230d      	movs	r3, #13
 8006932:	e06a      	b.n	8006a0a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	f04f 32ff 	mov.w	r2, #4294967295
 800693a:	611a      	str	r2, [r3, #16]
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	691a      	ldr	r2, [r3, #16]
 8006940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006942:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006946:	2280      	movs	r2, #128	; 0x80
 8006948:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800694a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800694e:	2b03      	cmp	r3, #3
 8006950:	d149      	bne.n	80069e6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	3330      	adds	r3, #48	; 0x30
 8006956:	3330      	adds	r3, #48	; 0x30
 8006958:	4618      	mov	r0, r3
 800695a:	f7fe fb3b 	bl	8004fd4 <ld_word>
 800695e:	4603      	mov	r3, r0
 8006960:	2b01      	cmp	r3, #1
 8006962:	d140      	bne.n	80069e6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006966:	3301      	adds	r3, #1
 8006968:	4619      	mov	r1, r3
 800696a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800696c:	f7fe fde2 	bl	8005534 <move_window>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d137      	bne.n	80069e6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	2200      	movs	r2, #0
 800697a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697e:	3330      	adds	r3, #48	; 0x30
 8006980:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe fb25 	bl	8004fd4 <ld_word>
 800698a:	4603      	mov	r3, r0
 800698c:	461a      	mov	r2, r3
 800698e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006992:	429a      	cmp	r2, r3
 8006994:	d127      	bne.n	80069e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006998:	3330      	adds	r3, #48	; 0x30
 800699a:	4618      	mov	r0, r3
 800699c:	f7fe fb32 	bl	8005004 <ld_dword>
 80069a0:	4603      	mov	r3, r0
 80069a2:	4a1c      	ldr	r2, [pc, #112]	; (8006a14 <find_volume+0x48c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d11e      	bne.n	80069e6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80069a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069aa:	3330      	adds	r3, #48	; 0x30
 80069ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fe fb27 	bl	8005004 <ld_dword>
 80069b6:	4603      	mov	r3, r0
 80069b8:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <find_volume+0x490>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d113      	bne.n	80069e6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80069be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c0:	3330      	adds	r3, #48	; 0x30
 80069c2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe fb1c 	bl	8005004 <ld_dword>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	3330      	adds	r3, #48	; 0x30
 80069d6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fe fb12 	bl	8005004 <ld_dword>
 80069e0:	4602      	mov	r2, r0
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80069e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80069ec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80069ee:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <find_volume+0x494>)
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	3301      	adds	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <find_volume+0x494>)
 80069f8:	801a      	strh	r2, [r3, #0]
 80069fa:	4b08      	ldr	r3, [pc, #32]	; (8006a1c <find_volume+0x494>)
 80069fc:	881a      	ldrh	r2, [r3, #0]
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006a02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a04:	f7fe fd2e 	bl	8005464 <clear_lock>
#endif
	return FR_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3758      	adds	r7, #88	; 0x58
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	41615252 	.word	0x41615252
 8006a18:	61417272 	.word	0x61417272
 8006a1c:	20001040 	.word	0x20001040

08006a20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006a2a:	2309      	movs	r3, #9
 8006a2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01c      	beq.n	8006a6e <validate+0x4e>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d018      	beq.n	8006a6e <validate+0x4e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d013      	beq.n	8006a6e <validate+0x4e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	889a      	ldrh	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	88db      	ldrh	r3, [r3, #6]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d10c      	bne.n	8006a6e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	785b      	ldrb	r3, [r3, #1]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe fa1c 	bl	8004e98 <disk_status>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <validate+0x4e>
			res = FR_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d102      	bne.n	8006a7a <validate+0x5a>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	e000      	b.n	8006a7c <validate+0x5c>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	6013      	str	r3, [r2, #0]
	return res;
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b088      	sub	sp, #32
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	4613      	mov	r3, r2
 8006a98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006a9e:	f107 0310 	add.w	r3, r7, #16
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff fcd5 	bl	8006452 <get_ldnumber>
 8006aa8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	da01      	bge.n	8006ab4 <f_mount+0x28>
 8006ab0:	230b      	movs	r3, #11
 8006ab2:	e02b      	b.n	8006b0c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006ab4:	4a17      	ldr	r2, [pc, #92]	; (8006b14 <f_mount+0x88>)
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006abc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d005      	beq.n	8006ad0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006ac4:	69b8      	ldr	r0, [r7, #24]
 8006ac6:	f7fe fccd 	bl	8005464 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2200      	movs	r2, #0
 8006ace:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	490d      	ldr	r1, [pc, #52]	; (8006b14 <f_mount+0x88>)
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <f_mount+0x66>
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d001      	beq.n	8006af6 <f_mount+0x6a>
 8006af2:	2300      	movs	r3, #0
 8006af4:	e00a      	b.n	8006b0c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006af6:	f107 010c 	add.w	r1, r7, #12
 8006afa:	f107 0308 	add.w	r3, r7, #8
 8006afe:	2200      	movs	r2, #0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff fd41 	bl	8006588 <find_volume>
 8006b06:	4603      	mov	r3, r0
 8006b08:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3720      	adds	r7, #32
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	2000103c 	.word	0x2000103c

08006b18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b098      	sub	sp, #96	; 0x60
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	4613      	mov	r3, r2
 8006b24:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <f_open+0x18>
 8006b2c:	2309      	movs	r3, #9
 8006b2e:	e1ad      	b.n	8006e8c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006b30:	79fb      	ldrb	r3, [r7, #7]
 8006b32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b36:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006b38:	79fa      	ldrb	r2, [r7, #7]
 8006b3a:	f107 0110 	add.w	r1, r7, #16
 8006b3e:	f107 0308 	add.w	r3, r7, #8
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7ff fd20 	bl	8006588 <find_volume>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006b4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f040 8191 	bne.w	8006e7a <f_open+0x362>
		dj.obj.fs = fs;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	f107 0314 	add.w	r3, r7, #20
 8006b62:	4611      	mov	r1, r2
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7ff fc03 	bl	8006370 <follow_path>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006b70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d11a      	bne.n	8006bae <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006b78:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b7c:	b25b      	sxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	da03      	bge.n	8006b8a <f_open+0x72>
				res = FR_INVALID_NAME;
 8006b82:	2306      	movs	r3, #6
 8006b84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006b88:	e011      	b.n	8006bae <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006b8a:	79fb      	ldrb	r3, [r7, #7]
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	bf14      	ite	ne
 8006b94:	2301      	movne	r3, #1
 8006b96:	2300      	moveq	r3, #0
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f107 0314 	add.w	r3, r7, #20
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fe fb16 	bl	80051d4 <chk_lock>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006bae:	79fb      	ldrb	r3, [r7, #7]
 8006bb0:	f003 031c 	and.w	r3, r3, #28
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d07f      	beq.n	8006cb8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006bb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d017      	beq.n	8006bf0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d10e      	bne.n	8006be6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006bc8:	f7fe fb60 	bl	800528c <enq_lock>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d006      	beq.n	8006be0 <f_open+0xc8>
 8006bd2:	f107 0314 	add.w	r3, r7, #20
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7ff faa4 	bl	8006124 <dir_register>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	e000      	b.n	8006be2 <f_open+0xca>
 8006be0:	2312      	movs	r3, #18
 8006be2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	f043 0308 	orr.w	r3, r3, #8
 8006bec:	71fb      	strb	r3, [r7, #7]
 8006bee:	e010      	b.n	8006c12 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006bf0:	7ebb      	ldrb	r3, [r7, #26]
 8006bf2:	f003 0311 	and.w	r3, r3, #17
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <f_open+0xea>
					res = FR_DENIED;
 8006bfa:	2307      	movs	r3, #7
 8006bfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006c00:	e007      	b.n	8006c12 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006c02:	79fb      	ldrb	r3, [r7, #7]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <f_open+0xfa>
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006c12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d168      	bne.n	8006cec <f_open+0x1d4>
 8006c1a:	79fb      	ldrb	r3, [r7, #7]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d063      	beq.n	8006cec <f_open+0x1d4>
				dw = GET_FATTIME();
 8006c24:	f7fd ffcc 	bl	8004bc0 <get_fattime>
 8006c28:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2c:	330e      	adds	r3, #14
 8006c2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fe fa25 	bl	8005080 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c38:	3316      	adds	r3, #22
 8006c3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7fe fa1f 	bl	8005080 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c44:	330b      	adds	r3, #11
 8006c46:	2220      	movs	r2, #32
 8006c48:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c4e:	4611      	mov	r1, r2
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff f976 	bl	8005f42 <ld_clust>
 8006c56:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7ff f98e 	bl	8005f80 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c66:	331c      	adds	r3, #28
 8006c68:	2100      	movs	r1, #0
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe fa08 	bl	8005080 <st_dword>
					fs->wflag = 1;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2201      	movs	r2, #1
 8006c74:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d037      	beq.n	8006cec <f_open+0x1d4>
						dw = fs->winsect;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006c82:	f107 0314 	add.w	r3, r7, #20
 8006c86:	2200      	movs	r2, #0
 8006c88:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe fea1 	bl	80059d2 <remove_chain>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006c96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d126      	bne.n	8006cec <f_open+0x1d4>
							res = move_window(fs, dw);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fe fc46 	bl	8005534 <move_window>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cb2:	3a01      	subs	r2, #1
 8006cb4:	60da      	str	r2, [r3, #12]
 8006cb6:	e019      	b.n	8006cec <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006cb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d115      	bne.n	8006cec <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006cc0:	7ebb      	ldrb	r3, [r7, #26]
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8006cca:	2304      	movs	r3, #4
 8006ccc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006cd0:	e00c      	b.n	8006cec <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d007      	beq.n	8006cec <f_open+0x1d4>
 8006cdc:	7ebb      	ldrb	r3, [r7, #26]
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d002      	beq.n	8006cec <f_open+0x1d4>
						res = FR_DENIED;
 8006ce6:	2307      	movs	r3, #7
 8006ce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006cec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d128      	bne.n	8006d46 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006cfe:	79fb      	ldrb	r3, [r7, #7]
 8006d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d04:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006d0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d14:	79fb      	ldrb	r3, [r7, #7]
 8006d16:	f023 0301 	bic.w	r3, r3, #1
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	bf14      	ite	ne
 8006d1e:	2301      	movne	r3, #1
 8006d20:	2300      	moveq	r3, #0
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	461a      	mov	r2, r3
 8006d26:	f107 0314 	add.w	r3, r7, #20
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe facf 	bl	80052d0 <inc_lock>
 8006d32:	4602      	mov	r2, r0
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d102      	bne.n	8006d46 <f_open+0x22e>
 8006d40:	2302      	movs	r3, #2
 8006d42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006d46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f040 8095 	bne.w	8006e7a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d54:	4611      	mov	r1, r2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff f8f3 	bl	8005f42 <ld_clust>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d64:	331c      	adds	r3, #28
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe f94c 	bl	8005004 <ld_dword>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	88da      	ldrh	r2, [r3, #6]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	79fa      	ldrb	r2, [r7, #7]
 8006d8a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2200      	movs	r2, #0
 8006d96:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3330      	adds	r3, #48	; 0x30
 8006da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006da6:	2100      	movs	r1, #0
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fe f9b6 	bl	800511a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d060      	beq.n	8006e7a <f_open+0x362>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d05c      	beq.n	8006e7a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	895b      	ldrh	r3, [r3, #10]
 8006dcc:	025b      	lsls	r3, r3, #9
 8006dce:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	657b      	str	r3, [r7, #84]	; 0x54
 8006ddc:	e016      	b.n	8006e0c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fe fc61 	bl	80056aa <get_fat>
 8006de8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8006dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d802      	bhi.n	8006df6 <f_open+0x2de>
 8006df0:	2302      	movs	r3, #2
 8006df2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d102      	bne.n	8006e04 <f_open+0x2ec>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006e04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8006e0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <f_open+0x304>
 8006e14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d8e0      	bhi.n	8006dde <f_open+0x2c6>
				}
				fp->clust = clst;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e20:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d127      	bne.n	8006e7a <f_open+0x362>
 8006e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d022      	beq.n	8006e7a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fe fc17 	bl	800566c <clust2sect>
 8006e3e:	6478      	str	r0, [r7, #68]	; 0x44
 8006e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d103      	bne.n	8006e4e <f_open+0x336>
						res = FR_INT_ERR;
 8006e46:	2302      	movs	r3, #2
 8006e48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006e4c:	e015      	b.n	8006e7a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e50:	0a5a      	lsrs	r2, r3, #9
 8006e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e54:	441a      	add	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	7858      	ldrb	r0, [r3, #1]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a1a      	ldr	r2, [r3, #32]
 8006e68:	2301      	movs	r3, #1
 8006e6a:	f7fe f855 	bl	8004f18 <disk_read>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <f_open+0x362>
 8006e74:	2301      	movs	r3, #1
 8006e76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <f_open+0x370>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3760      	adds	r7, #96	; 0x60
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08e      	sub	sp, #56	; 0x38
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f107 0214 	add.w	r2, r7, #20
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7ff fdb3 	bl	8006a20 <validate>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d107      	bne.n	8006ed8 <f_read+0x44>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	7d5b      	ldrb	r3, [r3, #21]
 8006ecc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8006ed0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <f_read+0x4a>
 8006ed8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006edc:	e115      	b.n	800710a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	7d1b      	ldrb	r3, [r3, #20]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <f_read+0x5a>
 8006eea:	2307      	movs	r3, #7
 8006eec:	e10d      	b.n	800710a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	f240 80fe 	bls.w	8007100 <f_read+0x26c>
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8006f08:	e0fa      	b.n	8007100 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f040 80c6 	bne.w	80070a4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	0a5b      	lsrs	r3, r3, #9
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	8952      	ldrh	r2, [r2, #10]
 8006f22:	3a01      	subs	r2, #1
 8006f24:	4013      	ands	r3, r2
 8006f26:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d12f      	bne.n	8006f8e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d103      	bne.n	8006f3e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f3c:	e013      	b.n	8006f66 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d007      	beq.n	8006f56 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7fe fe3d 	bl	8005bcc <clmt_clust>
 8006f52:	6338      	str	r0, [r7, #48]	; 0x30
 8006f54:	e007      	b.n	8006f66 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	f7fe fba3 	bl	80056aa <get_fat>
 8006f64:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d804      	bhi.n	8006f76 <f_read+0xe2>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	755a      	strb	r2, [r3, #21]
 8006f72:	2302      	movs	r3, #2
 8006f74:	e0c9      	b.n	800710a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7c:	d104      	bne.n	8006f88 <f_read+0xf4>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	755a      	strb	r2, [r3, #21]
 8006f84:	2301      	movs	r3, #1
 8006f86:	e0c0      	b.n	800710a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f8c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	4619      	mov	r1, r3
 8006f96:	4610      	mov	r0, r2
 8006f98:	f7fe fb68 	bl	800566c <clust2sect>
 8006f9c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d104      	bne.n	8006fae <f_read+0x11a>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	755a      	strb	r2, [r3, #21]
 8006faa:	2302      	movs	r3, #2
 8006fac:	e0ad      	b.n	800710a <f_read+0x276>
			sect += csect;
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	0a5b      	lsrs	r3, r3, #9
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d039      	beq.n	8007036 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	4413      	add	r3, r2
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	8952      	ldrh	r2, [r2, #10]
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d905      	bls.n	8006fdc <f_read+0x148>
					cc = fs->csize - csect;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	895b      	ldrh	r3, [r3, #10]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	7858      	ldrb	r0, [r3, #1]
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fe6:	f7fd ff97 	bl	8004f18 <disk_read>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d004      	beq.n	8006ffa <f_read+0x166>
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	755a      	strb	r2, [r3, #21]
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e087      	b.n	800710a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	7d1b      	ldrb	r3, [r3, #20]
 8006ffe:	b25b      	sxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	da14      	bge.n	800702e <f_read+0x19a>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a1a      	ldr	r2, [r3, #32]
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800700e:	429a      	cmp	r2, r3
 8007010:	d90d      	bls.n	800702e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	6a1a      	ldr	r2, [r3, #32]
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	025b      	lsls	r3, r3, #9
 800701c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701e:	18d0      	adds	r0, r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3330      	adds	r3, #48	; 0x30
 8007024:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007028:	4619      	mov	r1, r3
 800702a:	f7fe f855 	bl	80050d8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	025b      	lsls	r3, r3, #9
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007034:	e050      	b.n	80070d8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	429a      	cmp	r2, r3
 800703e:	d02e      	beq.n	800709e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	7d1b      	ldrb	r3, [r3, #20]
 8007044:	b25b      	sxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	da18      	bge.n	800707c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	7858      	ldrb	r0, [r3, #1]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6a1a      	ldr	r2, [r3, #32]
 8007058:	2301      	movs	r3, #1
 800705a:	f7fd ff7d 	bl	8004f58 <disk_write>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d004      	beq.n	800706e <f_read+0x1da>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	755a      	strb	r2, [r3, #21]
 800706a:	2301      	movs	r3, #1
 800706c:	e04d      	b.n	800710a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	7d1b      	ldrb	r3, [r3, #20]
 8007072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007076:	b2da      	uxtb	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	7858      	ldrb	r0, [r3, #1]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007086:	2301      	movs	r3, #1
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	f7fd ff45 	bl	8004f18 <disk_read>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d004      	beq.n	800709e <f_read+0x20a>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2201      	movs	r2, #1
 8007098:	755a      	strb	r2, [r3, #21]
 800709a:	2301      	movs	r3, #1
 800709c:	e035      	b.n	800710a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80070b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d901      	bls.n	80070be <f_read+0x22a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	699b      	ldr	r3, [r3, #24]
 80070c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070cc:	4413      	add	r3, r2
 80070ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070d0:	4619      	mov	r1, r3
 80070d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070d4:	f7fe f800 	bl	80050d8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80070d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070dc:	4413      	add	r3, r2
 80070de:	627b      	str	r3, [r7, #36]	; 0x24
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	699a      	ldr	r2, [r3, #24]
 80070e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e6:	441a      	add	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	619a      	str	r2, [r3, #24]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f2:	441a      	add	r2, r3
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	f47f af01 	bne.w	8006f0a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3738      	adds	r7, #56	; 0x38
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b086      	sub	sp, #24
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f107 0208 	add.w	r2, r7, #8
 8007120:	4611      	mov	r1, r2
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff fc7c 	bl	8006a20 <validate>
 8007128:	4603      	mov	r3, r0
 800712a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d168      	bne.n	8007204 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	7d1b      	ldrb	r3, [r3, #20]
 8007136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713a:	2b00      	cmp	r3, #0
 800713c:	d062      	beq.n	8007204 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	7d1b      	ldrb	r3, [r3, #20]
 8007142:	b25b      	sxtb	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	da15      	bge.n	8007174 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	7858      	ldrb	r0, [r3, #1]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1a      	ldr	r2, [r3, #32]
 8007156:	2301      	movs	r3, #1
 8007158:	f7fd fefe 	bl	8004f58 <disk_write>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <f_sync+0x54>
 8007162:	2301      	movs	r3, #1
 8007164:	e04f      	b.n	8007206 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	7d1b      	ldrb	r3, [r3, #20]
 800716a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800716e:	b2da      	uxtb	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007174:	f7fd fd24 	bl	8004bc0 <get_fattime>
 8007178:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007180:	4619      	mov	r1, r3
 8007182:	4610      	mov	r0, r2
 8007184:	f7fe f9d6 	bl	8005534 <move_window>
 8007188:	4603      	mov	r3, r0
 800718a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800718c:	7dfb      	ldrb	r3, [r7, #23]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d138      	bne.n	8007204 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007196:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	330b      	adds	r3, #11
 800719c:	781a      	ldrb	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	330b      	adds	r3, #11
 80071a2:	f042 0220 	orr.w	r2, r2, #32
 80071a6:	b2d2      	uxtb	r2, r2
 80071a8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6818      	ldr	r0, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	461a      	mov	r2, r3
 80071b4:	68f9      	ldr	r1, [r7, #12]
 80071b6:	f7fe fee3 	bl	8005f80 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f103 021c 	add.w	r2, r3, #28
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f7fd ff5a 	bl	8005080 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3316      	adds	r3, #22
 80071d0:	6939      	ldr	r1, [r7, #16]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fd ff54 	bl	8005080 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	3312      	adds	r3, #18
 80071dc:	2100      	movs	r1, #0
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fd ff33 	bl	800504a <st_word>
					fs->wflag = 1;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2201      	movs	r2, #1
 80071e8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fe f9cf 	bl	8005590 <sync_fs>
 80071f2:	4603      	mov	r3, r0
 80071f4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	7d1b      	ldrb	r3, [r3, #20]
 80071fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007204:	7dfb      	ldrb	r3, [r7, #23]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff ff7b 	bl	8007112 <f_sync>
 800721c:	4603      	mov	r3, r0
 800721e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007220:	7bfb      	ldrb	r3, [r7, #15]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d118      	bne.n	8007258 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f107 0208 	add.w	r2, r7, #8
 800722c:	4611      	mov	r1, r2
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff fbf6 	bl	8006a20 <validate>
 8007234:	4603      	mov	r3, r0
 8007236:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007238:	7bfb      	ldrb	r3, [r7, #15]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10c      	bne.n	8007258 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe f8d2 	bl	80053ec <dec_lock>
 8007248:	4603      	mov	r3, r0
 800724a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d102      	bne.n	8007258 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007258:	7bfb      	ldrb	r3, [r7, #15]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b086      	sub	sp, #24
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d101      	bne.n	8007276 <f_opendir+0x14>
 8007272:	2309      	movs	r3, #9
 8007274:	e064      	b.n	8007340 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800727a:	f107 010c 	add.w	r1, r7, #12
 800727e:	463b      	mov	r3, r7
 8007280:	2200      	movs	r2, #0
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff f980 	bl	8006588 <find_volume>
 8007288:	4603      	mov	r3, r0
 800728a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d14f      	bne.n	8007332 <f_opendir+0xd0>
		obj->fs = fs;
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	4619      	mov	r1, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff f867 	bl	8006370 <follow_path>
 80072a2:	4603      	mov	r3, r0
 80072a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80072a6:	7dfb      	ldrb	r3, [r7, #23]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d13d      	bne.n	8007328 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80072b2:	b25b      	sxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	db12      	blt.n	80072de <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	799b      	ldrb	r3, [r3, #6]
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	4619      	mov	r1, r3
 80072cc:	4610      	mov	r0, r2
 80072ce:	f7fe fe38 	bl	8005f42 <ld_clust>
 80072d2:	4602      	mov	r2, r0
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	609a      	str	r2, [r3, #8]
 80072d8:	e001      	b.n	80072de <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80072da:	2305      	movs	r3, #5
 80072dc:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80072de:	7dfb      	ldrb	r3, [r7, #23]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d121      	bne.n	8007328 <f_opendir+0xc6>
				obj->id = fs->id;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	88da      	ldrh	r2, [r3, #6]
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80072ec:	2100      	movs	r1, #0
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fe fca0 	bl	8005c34 <dir_sdi>
 80072f4:	4603      	mov	r3, r0
 80072f6:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d114      	bne.n	8007328 <f_opendir+0xc6>
					if (obj->sclust) {
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00d      	beq.n	8007322 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007306:	2100      	movs	r1, #0
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7fd ffe1 	bl	80052d0 <inc_lock>
 800730e:	4602      	mov	r2, r0
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <f_opendir+0xc6>
 800731c:	2312      	movs	r3, #18
 800731e:	75fb      	strb	r3, [r7, #23]
 8007320:	e002      	b.n	8007328 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	2200      	movs	r2, #0
 8007326:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8007328:	7dfb      	ldrb	r3, [r7, #23]
 800732a:	2b04      	cmp	r3, #4
 800732c:	d101      	bne.n	8007332 <f_opendir+0xd0>
 800732e:	2305      	movs	r3, #5
 8007330:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <f_opendir+0xdc>
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	2200      	movs	r2, #0
 800733c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800733e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f107 0208 	add.w	r2, r7, #8
 8007356:	4611      	mov	r1, r2
 8007358:	4618      	mov	r0, r3
 800735a:	f7ff fb61 	bl	8006a20 <validate>
 800735e:	4603      	mov	r3, r0
 8007360:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d110      	bne.n	800738a <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d006      	beq.n	800737e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	4618      	mov	r0, r3
 8007376:	f7fe f839 	bl	80053ec <dec_lock>
 800737a:	4603      	mov	r3, r0
 800737c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d102      	bne.n	800738a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800738a:	7bfb      	ldrb	r3, [r7, #15]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f107 0208 	add.w	r2, r7, #8
 80073a4:	4611      	mov	r1, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7ff fb3a 	bl	8006a20 <validate>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d126      	bne.n	8007404 <f_readdir+0x70>
		if (!fno) {
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d106      	bne.n	80073ca <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80073bc:	2100      	movs	r1, #0
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fe fc38 	bl	8005c34 <dir_sdi>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]
 80073c8:	e01c      	b.n	8007404 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80073ca:	2100      	movs	r1, #0
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7fe fdf7 	bl	8005fc0 <dir_read>
 80073d2:	4603      	mov	r3, r0
 80073d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	2b04      	cmp	r3, #4
 80073da:	d101      	bne.n	80073e0 <f_readdir+0x4c>
 80073dc:	2300      	movs	r3, #0
 80073de:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d10e      	bne.n	8007404 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80073e6:	6839      	ldr	r1, [r7, #0]
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7fe fecd 	bl	8006188 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80073ee:	2100      	movs	r1, #0
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7fe fc9a 	bl	8005d2a <dir_next>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	2b04      	cmp	r3, #4
 80073fe:	d101      	bne.n	8007404 <f_readdir+0x70>
 8007400:	2300      	movs	r3, #0
 8007402:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007404:	7bfb      	ldrb	r3, [r7, #15]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007410:	b480      	push	{r7}
 8007412:	b087      	sub	sp, #28
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	4613      	mov	r3, r2
 800741c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800741e:	2301      	movs	r3, #1
 8007420:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007422:	2300      	movs	r3, #0
 8007424:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007426:	4b1f      	ldr	r3, [pc, #124]	; (80074a4 <FATFS_LinkDriverEx+0x94>)
 8007428:	7a5b      	ldrb	r3, [r3, #9]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d131      	bne.n	8007494 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007430:	4b1c      	ldr	r3, [pc, #112]	; (80074a4 <FATFS_LinkDriverEx+0x94>)
 8007432:	7a5b      	ldrb	r3, [r3, #9]
 8007434:	b2db      	uxtb	r3, r3
 8007436:	461a      	mov	r2, r3
 8007438:	4b1a      	ldr	r3, [pc, #104]	; (80074a4 <FATFS_LinkDriverEx+0x94>)
 800743a:	2100      	movs	r1, #0
 800743c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800743e:	4b19      	ldr	r3, [pc, #100]	; (80074a4 <FATFS_LinkDriverEx+0x94>)
 8007440:	7a5b      	ldrb	r3, [r3, #9]
 8007442:	b2db      	uxtb	r3, r3
 8007444:	4a17      	ldr	r2, [pc, #92]	; (80074a4 <FATFS_LinkDriverEx+0x94>)
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	4413      	add	r3, r2
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800744e:	4b15      	ldr	r3, [pc, #84]	; (80074a4 <FATFS_LinkDriverEx+0x94>)
 8007450:	7a5b      	ldrb	r3, [r3, #9]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	461a      	mov	r2, r3
 8007456:	4b13      	ldr	r3, [pc, #76]	; (80074a4 <FATFS_LinkDriverEx+0x94>)
 8007458:	4413      	add	r3, r2
 800745a:	79fa      	ldrb	r2, [r7, #7]
 800745c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800745e:	4b11      	ldr	r3, [pc, #68]	; (80074a4 <FATFS_LinkDriverEx+0x94>)
 8007460:	7a5b      	ldrb	r3, [r3, #9]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	b2d1      	uxtb	r1, r2
 8007468:	4a0e      	ldr	r2, [pc, #56]	; (80074a4 <FATFS_LinkDriverEx+0x94>)
 800746a:	7251      	strb	r1, [r2, #9]
 800746c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800746e:	7dbb      	ldrb	r3, [r7, #22]
 8007470:	3330      	adds	r3, #48	; 0x30
 8007472:	b2da      	uxtb	r2, r3
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	3301      	adds	r3, #1
 800747c:	223a      	movs	r2, #58	; 0x3a
 800747e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	3302      	adds	r3, #2
 8007484:	222f      	movs	r2, #47	; 0x2f
 8007486:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	3303      	adds	r3, #3
 800748c:	2200      	movs	r2, #0
 800748e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007494:	7dfb      	ldrb	r3, [r7, #23]
}
 8007496:	4618      	mov	r0, r3
 8007498:	371c      	adds	r7, #28
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	20001064 	.word	0x20001064

080074a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80074b2:	2200      	movs	r2, #0
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff ffaa 	bl	8007410 <FATFS_LinkDriverEx>
 80074bc:	4603      	mov	r3, r0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <__libc_init_array>:
 80074c8:	b570      	push	{r4, r5, r6, lr}
 80074ca:	4d0d      	ldr	r5, [pc, #52]	; (8007500 <__libc_init_array+0x38>)
 80074cc:	4c0d      	ldr	r4, [pc, #52]	; (8007504 <__libc_init_array+0x3c>)
 80074ce:	1b64      	subs	r4, r4, r5
 80074d0:	10a4      	asrs	r4, r4, #2
 80074d2:	2600      	movs	r6, #0
 80074d4:	42a6      	cmp	r6, r4
 80074d6:	d109      	bne.n	80074ec <__libc_init_array+0x24>
 80074d8:	4d0b      	ldr	r5, [pc, #44]	; (8007508 <__libc_init_array+0x40>)
 80074da:	4c0c      	ldr	r4, [pc, #48]	; (800750c <__libc_init_array+0x44>)
 80074dc:	f000 f84a 	bl	8007574 <_init>
 80074e0:	1b64      	subs	r4, r4, r5
 80074e2:	10a4      	asrs	r4, r4, #2
 80074e4:	2600      	movs	r6, #0
 80074e6:	42a6      	cmp	r6, r4
 80074e8:	d105      	bne.n	80074f6 <__libc_init_array+0x2e>
 80074ea:	bd70      	pop	{r4, r5, r6, pc}
 80074ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f0:	4798      	blx	r3
 80074f2:	3601      	adds	r6, #1
 80074f4:	e7ee      	b.n	80074d4 <__libc_init_array+0xc>
 80074f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074fa:	4798      	blx	r3
 80074fc:	3601      	adds	r6, #1
 80074fe:	e7f2      	b.n	80074e6 <__libc_init_array+0x1e>
 8007500:	080076a8 	.word	0x080076a8
 8007504:	080076a8 	.word	0x080076a8
 8007508:	080076a8 	.word	0x080076a8
 800750c:	080076ac 	.word	0x080076ac

08007510 <memset>:
 8007510:	4402      	add	r2, r0
 8007512:	4603      	mov	r3, r0
 8007514:	4293      	cmp	r3, r2
 8007516:	d100      	bne.n	800751a <memset+0xa>
 8007518:	4770      	bx	lr
 800751a:	f803 1b01 	strb.w	r1, [r3], #1
 800751e:	e7f9      	b.n	8007514 <memset+0x4>

08007520 <strncmp>:
 8007520:	b510      	push	{r4, lr}
 8007522:	b17a      	cbz	r2, 8007544 <strncmp+0x24>
 8007524:	4603      	mov	r3, r0
 8007526:	3901      	subs	r1, #1
 8007528:	1884      	adds	r4, r0, r2
 800752a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800752e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007532:	4290      	cmp	r0, r2
 8007534:	d101      	bne.n	800753a <strncmp+0x1a>
 8007536:	42a3      	cmp	r3, r4
 8007538:	d101      	bne.n	800753e <strncmp+0x1e>
 800753a:	1a80      	subs	r0, r0, r2
 800753c:	bd10      	pop	{r4, pc}
 800753e:	2800      	cmp	r0, #0
 8007540:	d1f3      	bne.n	800752a <strncmp+0xa>
 8007542:	e7fa      	b.n	800753a <strncmp+0x1a>
 8007544:	4610      	mov	r0, r2
 8007546:	e7f9      	b.n	800753c <strncmp+0x1c>

08007548 <strstr>:
 8007548:	780a      	ldrb	r2, [r1, #0]
 800754a:	b570      	push	{r4, r5, r6, lr}
 800754c:	b96a      	cbnz	r2, 800756a <strstr+0x22>
 800754e:	bd70      	pop	{r4, r5, r6, pc}
 8007550:	429a      	cmp	r2, r3
 8007552:	d109      	bne.n	8007568 <strstr+0x20>
 8007554:	460c      	mov	r4, r1
 8007556:	4605      	mov	r5, r0
 8007558:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0f6      	beq.n	800754e <strstr+0x6>
 8007560:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007564:	429e      	cmp	r6, r3
 8007566:	d0f7      	beq.n	8007558 <strstr+0x10>
 8007568:	3001      	adds	r0, #1
 800756a:	7803      	ldrb	r3, [r0, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1ef      	bne.n	8007550 <strstr+0x8>
 8007570:	4618      	mov	r0, r3
 8007572:	e7ec      	b.n	800754e <strstr+0x6>

08007574 <_init>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	bf00      	nop
 8007578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757a:	bc08      	pop	{r3}
 800757c:	469e      	mov	lr, r3
 800757e:	4770      	bx	lr

08007580 <_fini>:
 8007580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007582:	bf00      	nop
 8007584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007586:	bc08      	pop	{r3}
 8007588:	469e      	mov	lr, r3
 800758a:	4770      	bx	lr
